#!/usr/bin/env bash

# ==========================================================================
#  vps-monitoring-qsetup ‚Äî –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ –∑–∞ MonHub
# --------------------------------------------------------------------------
#  –í–µ—Ä—Å–∏—è: 0.1-test
#  –î–∞—Ç–∞: 2025-08-10
#  –ê–≤—Ç–æ—Ä: NetGalaxySoft
# ==========================================================================
#
#  –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–ø–æ–ª–∞–≥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ (Prometheus, Grafana, Alertmanager,
#  Loki, Promtail, node_exporter, blackbox_exporter) –≤—ä—Ä—Ö—É MonHub.
#  –ò–∑–ø—ä–ª–Ω—è–≤–∞ —Å–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ (MonHub), –±–µ–∑ SSH –∫—ä–º –¥—Ä—É–≥–∏ –º–∞—à–∏–Ω–∏.
#
#  –ï—Ç–∞–ø–∏:
#    1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ
#    2. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
#    3. –†–∞–∑–ø–æ–ª–∞–≥–∞–Ω–µ –Ω–∞ Docker Compose —Å—Ç–µ–∫–∞
#    4. –ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞ –¥–æ—Å—Ç—ä–ø (UI —Å–∞–º–æ –ø—Ä–µ–∑ SSH —Ç—É–Ω–µ–ª; data —Å–∞–º–æ –ø–æ VPN)
#    5. –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç
# ==========================================================================

set -euo pipefail
set -o errtrace
trap 'echo "‚ùå –ì—Ä–µ—à–∫–∞ –Ω–∞ —Ä–µ–¥ $LINENO: ${BASH_COMMAND} (–∫–æ–¥ $?)" >&2' ERR

# === –ü–û–ú–û–©–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===================================================
show_help() {
  echo "–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: vps-monitoring-qsetup.sh [–æ–ø—Ü–∏—è]"
  echo ""
  echo "–†–∞–∑–ø–æ–ª–∞–≥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ –∑–∞ MonHub (Prometheus, Grafana, Alertmanager,"
  echo "Loki, Promtail, node_exporter, blackbox_exporter) —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏—Ç–µ –Ω–∞ NetGalaxySoft."
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --version       –ü–æ–∫–∞–∑–≤–∞ –≤–µ—Ä—Å–∏—è—Ç–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞"
  echo "  --help          –ü–æ–∫–∞–∑–≤–∞ —Ç–∞–∑–∏ –ø–æ–º–æ—â"
}

# === –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –û–ü–¶–ò–ò ====================================================
if [[ $# -gt 0 ]]; then
  case "$1" in
    --version)
      echo "vps-monitoring-qsetup –≤–µ—Ä—Å–∏—è 0.1-test (10 –∞–≤–≥—É—Å—Ç 2025 –≥.)"
      exit 0
      ;;
    --help)
      show_help
      exit 0
      ;;
    *)
      echo "‚ùå –ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –æ–ø—Ü–∏—è: $1"
      show_help
      exit 1
      ;;
  esac
fi

# –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∑–∞ –ø–æ-—è—Å–µ–Ω —Å—Ç–∞—Ä—Ç
command -v clear >/dev/null && clear || printf "\033c"

# –ó–µ–ª–µ–Ω –±–∞–Ω–µ—Ä –∑–∞ –∑–∞–≥–ª–∞–≤–∏–µ
echo -e "\033[92m====================================================================="
echo    "vps-monhub-qsetup.sh ‚Äî –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω —Å—ä—Ä–≤—ä—Ä –∑–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –ª–æ–≥–æ–≤–µ"
echo    "–í–µ—Ä—Å–∏—è: 1.0 (Ubuntu 24.04 amd64)"
echo    "–õ–∏—Ü–µ–Ω–∑: NetGalaxySoft internal"
echo -e "=====================================================================\033[0m"
echo ""
echo ""

SETUP_DIR="/etc/netgalaxy"
SETUP_ENV_FILE="$SETUP_DIR/setup.env"
MODULES_FILE="$SETUP_DIR/todo.modules"

COMPOSE_DIR="/opt/netgalaxy/monhub"
PROM_DIR="$COMPOSE_DIR/prometheus"
ALERT_DIR="$COMPOSE_DIR/alertmanager"
LOKI_DIR="$COMPOSE_DIR/loki"
GRAFANA_DIR="$COMPOSE_DIR/grafana"

# --- –ú–∏–Ω–∏–º–∞–ª–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞–±–∏–ª–µ–Ω shim) ---
log()  { echo -e "$*"; }
ok()   { echo -e "‚úÖ $*"; }
warn() { echo -e "‚ö†Ô∏è  $*"; }
err()  { echo -e "‚ùå $*" >&2; }


# =====================================================================
# [–ú–û–î–£–õ 1] –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–ù–ò –ü–†–û–í–ï–†–ö–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =====================================================================
log "[1] –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–ù–ò –ü–†–û–í–ï–†–ö–ò –ù–ê –°–ò–°–¢–ï–ú–ê..."
log "-----------------------------------------------------------"
log ""

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ root –ø—Ä–∞–≤–∞
if [[ $EUID -ne 0 ]]; then
  echo "‚ùå –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å root –ø—Ä–∞–≤–∞ (sudo)."
  exit 1
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –±–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if [[ ! -f "$SETUP_ENV_FILE" ]] || ! sudo grep -q '^SETUP_VPS_BASE_STATUS=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "üõë –°—ä—Ä–≤—ä—Ä—ä—Ç –µ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–∞—á–∞–ª–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –ú–æ–ª—è, —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ —Ñ–∞–π–ª–∞ vps-base-qsetup.sh –∏ –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ."
  echo "üóëÔ∏è –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞."
  [[ -f "$0" ]] && rm -- "$0"
  exit 1
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–∫—Ä–∏–ø—Ç—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
if [[ -f "$SETUP_ENV_FILE" ]] && sudo grep -q '^SETUP_VPS_MONITORING_STATUS=‚úÖ' "$SETUP_ENV_FILE"; then
  echo "üõë –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç –≤–µ—á–µ –µ –±–∏–ª –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞ —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä."
  echo "–ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–µ –µ –ø–æ–∑–≤–æ–ª–µ–Ω–æ, –∑–∞ –¥–∞ —Å–µ –∏–∑–±–µ–≥–Ω–µ –ø–æ–≤—Ä–µ–¥–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞."
  [[ -f "$0" ]] && sudo rm -- "$0"
  exit 0
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞..."
if [[ -f /etc/os-release ]]; then
  source /etc/os-release
  OS_NAME=$ID
  OS_VERSION=$VERSION_ID
else
  echo "‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –û–°. –°–∫—Ä–∏–ø—Ç—ä—Ç –∏–∑–∏—Å–∫–≤–∞ Ubuntu –∏–ª–∏ Debian."
  exit 1
fi

SUPPORTED=false
if [[ "$OS_NAME" == "ubuntu" && ( "$OS_VERSION" == "22.04" || "$OS_VERSION" == "24.04" ) ]]; then
  SUPPORTED=true
elif [[ "$OS_NAME" == "debian" && ( "$OS_VERSION" == "11" || "$OS_VERSION" == "12" ) ]]; then
  SUPPORTED=true
fi

if [[ "$SUPPORTED" == false ]]; then
  echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ $PRETTY_NAME –Ω–µ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –æ—Ç —Ç–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç."
  echo "–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–∏ —Å–∏—Å—Ç–µ–º–∏: Ubuntu 22.04/24.04, Debian 11/12"
  exit 1
fi

echo "‚úÖ –ó–∞—Å–µ—á–µ–Ω–∞ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–∞ –û–°: $PRETTY_NAME"
echo ""

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE1=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 1 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
else
  # ‚úÖ –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ IP –∞–¥—Ä–µ—Å
  while true; do
    printf "üåê –í—ä–≤–µ–¥–µ—Ç–µ –ø—É–±–ª–∏—á–Ω–∏—è IP –∞–¥—Ä–µ—Å –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ (–∏–ª–∏ 'q' –∑–∞ –∏–∑—Ö–æ–¥): "
    read SERVER_IP

    if [[ "$SERVER_IP" == "q" || "$SERVER_IP" == "Q" ]]; then
      echo "‚ùé –°–∫—Ä–∏–ø—Ç—ä—Ç –±–µ—à–µ –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
      exit 0
    fi

    if ! [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω IP –∞–¥—Ä–µ—Å. –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω IPv4 –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: 192.168.1.100)."
      continue
    fi

    ACTUAL_IP=$(curl -s -4 ifconfig.me)

    if [[ "$ACTUAL_IP" != "$SERVER_IP" ]]; then
      echo ""
      echo "üö´ –ù–µ—Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ! –í—ä–≤–µ–¥–µ–Ω–∏—è—Ç IP ($SERVER_IP) –Ω–µ —Å—ä–≤–ø–∞–¥–∞ —Å —Ä–µ–∞–ª–Ω–∏—è IP –Ω–∞ –º–∞—à–∏–Ω–∞—Ç–∞ ($ACTUAL_IP)."
      echo ""
      read -p "üîÅ –ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –æ–ø–∏—Ç–∞—Ç–µ –æ—Ç–Ω–æ–≤–æ? [Enter –∑–∞ –î–ê, 'q' –∑–∞ –∏–∑—Ö–æ–¥]: " retry
      if [[ "$retry" == "q" || "$retry" == "Q" ]]; then
        echo "‚õî –°–∫—Ä–∏–ø—Ç—ä—Ç –±–µ—à–µ –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
        exit 0
      fi
      echo ""
    else
      echo "‚úÖ –ü–æ—Ç–≤—ä—Ä–¥–µ–Ω–æ: —Å–∫—Ä–∏–ø—Ç—ä—Ç –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ —Å IP $SERVER_IP."
      echo ""
      break
    fi
  done

  # ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–±—Ä–∞–Ω–∞—Ç–∞ –∑–∞ –ø—Ä–æ–º—è–Ω–∞/–∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
  if [[ -d "$NETGALAXY_DIR" ]]; then
    # 0) –°–≤–∞–ª—è–º–µ immutable —Ñ–ª–∞–≥–∞ –∏ –∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞
    sudo chattr -i "$NETGALAXY_DIR" 2>/dev/null || true

    # 1) –ü—ä—Ä–≤–æ —Å–≤–∞–ª—è–º–µ immutable —Ñ–ª–∞–≥–∞ (–∞–∫–æ –µ –∑–∞–¥–∞–¥–µ–Ω)
    [[ -f "$SETUP_ENV_FILE"      ]] && sudo chattr -i "$SETUP_ENV_FILE"       2>/dev/null || true
    [[ -f "$MODULES_FILE"        ]] && sudo chattr -i "$MODULES_FILE"         2>/dev/null || true
    [[ -f "$NETGALAXY_DIR/.nodelete" ]] && sudo chattr -i "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true

    # 2) –ü–æ—Å–ª–µ –∫–æ—Ä–∏–≥–∏—Ä–∞–º–µ —Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç –∏ –ø—Ä–∞–≤–∞ –ø–æ–æ—Ç–¥–µ–ª–Ω–æ (—Å–∞–º–æ –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç)
    sudo chown root:root "$NETGALAXY_DIR" 2>/dev/null || true
    sudo chmod 755 "$NETGALAXY_DIR"       2>/dev/null || true

    [[ -f "$SETUP_ENV_FILE"      ]] && { sudo chown root:root "$SETUP_ENV_FILE"      2>/dev/null || true; sudo chmod 644 "$SETUP_ENV_FILE"      2>/dev/null || true; }
    [[ -f "$MODULES_FILE"        ]] && { sudo chown root:root "$MODULES_FILE"        2>/dev/null || true; sudo chmod 644 "$MODULES_FILE"        2>/dev/null || true; }
    [[ -f "$NETGALAXY_DIR/.nodelete" ]] && { sudo chown root:root "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true; sudo chmod 644 "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true; }
  fi

  # ‚úÖ –ó–∞–ø–∏—Å –∏–ª–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ SERVER_IP –≤ todo.modules
  if sudo grep -q '^SERVER_IP=' "$MODULES_FILE" 2>/dev/null; then
    sudo sed -i "s|^SERVER_IP=.*|SERVER_IP=\"$SERVER_IP\"|" "$MODULES_FILE"
  else
    echo "SERVER_IP=\"$SERVER_IP\"" | sudo tee -a "$MODULES_FILE" > /dev/null
  fi

echo ""

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ –ú–æ–¥—É–ª 1
  if sudo grep -q '^MON_RESULT_MODULE1=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE1=.*|MON_RESULT_MODULE1=‚úÖ|' "$SETUP_ENV_FILE"; then
        echo "MON_RESULT_MODULE1=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE1=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# ===================================================================
# [–ú–û–î–£–õ 2] –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–ò (FQDN/IP, —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
# ===================================================================
log "[2] –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–ò (FQDN/IP, —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
log "-------------------------------------------------------------------------"
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE2=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 2 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- 2.1 FQDN: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ (—Å –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ override –ø—Ä–µ–∑ DOMAIN_EXPECTED) -----
  FQDN_CANDIDATE=""
  if [[ -n "${DOMAIN_EXPECTED:-}" ]]; then
    FQDN_CANDIDATE="$DOMAIN_EXPECTED"
    echo "‚ÑπÔ∏è DOMAIN_EXPECTED –µ –ø–æ–¥–∞–¥–µ–Ω: $FQDN_CANDIDATE"
  else
    # –û–ø–∏—Ç 1: hostname --fqdn; –û–ø–∏—Ç 2: hostname -f; –û–ø–∏—Ç 3: hostname
    FQDN_CANDIDATE="$(hostname --fqdn 2>/dev/null || hostname -f 2>/dev/null || hostname 2>/dev/null || true)"
    FQDN_CANDIDATE="$(printf '%s' "$FQDN_CANDIDATE" | tr -d '[:space:]')"
  fi

  FQDN_REGEX='^([a-zA-Z0-9][-a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$'
  if [[ -n "$FQDN_CANDIDATE" && "$FQDN_CANDIDATE" =~ $FQDN_REGEX ]]; then
    FQDN="$FQDN_CANDIDATE"
    echo "‚úÖ –ó–∞—Å–µ—á–µ–Ω FQDN: $FQDN"
  else
    echo "‚ö†Ô∏è  –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤–∞–ª–∏–¥–µ–Ω FQDN –æ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∞."
    FQDN=""
  fi

  # --- 2.2 IP –≤–∞–ª–∏–¥–∏—Ä–∞—Ü–∏–∏ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏, –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è) -----------------------------------
  ACTUAL_IP="$(curl -s -4 ifconfig.me || true)"
  [[ -n "$ACTUAL_IP" ]] && echo "‚ÑπÔ∏è  –ó–∞—Å–µ—á–µ–Ω –ø—É–±–ª–∏—á–µ–Ω IP –∞–¥—Ä–µ—Å: $ACTUAL_IP"

  if [[ -n "$FQDN" ]]; then
    FQDN_IPS="$(dig +short "$FQDN" A 2>/dev/null | tr '\n' ' ' | sed 's/ *$//')"
    if [[ -n "$FQDN_IPS" ]]; then
      echo "‚ÑπÔ∏è  DNS A –∑–∞–ø–∏—Å–∏ –∑–∞ $FQDN: $FQDN_IPS"
      if [[ -n "$ACTUAL_IP" ]] && grep -qw "$ACTUAL_IP" <<< "$FQDN_IPS"; then
        echo "‚úÖ $FQDN —Ä–µ–∑–æ–ª–≤–∏—Ä–∞ –∫—ä–º –ø—É–±–ª–∏—á–Ω–∏—è IP –Ω–∞ –º–∞—à–∏–Ω–∞—Ç–∞."
      else
        echo "‚ö†Ô∏è  –ù–µ—Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –ª–∏–ø—Å–∞ –Ω–∞ –ø—É–±–ª–∏—á–µ–Ω IP ‚Üî DNS A –∑–∞–ø–∏—Å–∏—Ç–µ."
      fi
    else
      echo "‚ö†Ô∏è  $FQDN –Ω–µ —Ä–µ–∑–æ–ª–≤–∏—Ä–∞ –∫—ä–º A –∑–∞–ø–∏—Å –≤ –º–æ–º–µ–Ω—Ç–∞."
    fi
  fi

  # --- 2.3 –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ -----------------
COMPOSE_DIR="/opt/netgalaxy/monhub"
PROM_DIR="$COMPOSE_DIR/prometheus"
ALERT_DIR="$COMPOSE_DIR/alertmanager"
LOKI_DIR="$COMPOSE_DIR/loki"
GRAFANA_DIR="$COMPOSE_DIR/grafana"
LOG_DIR="/var/log/netgalaxy"

echo "üìÅ –°—ä–∑–¥–∞–≤–∞–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
sudo mkdir -p "$COMPOSE_DIR" || exit 1
sudo mkdir -p "$PROM_DIR" || exit 1
sudo mkdir -p "$ALERT_DIR" || exit 1
sudo mkdir -p "$LOKI_DIR" || exit 1
sudo mkdir -p "$GRAFANA_DIR" || exit 1
sudo mkdir -p "$LOG_DIR" || exit 1
echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏."

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º –ø—Ä–∞–≤–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç..."
sudo chown -R root:root "$COMPOSE_DIR" "$LOG_DIR"
sudo chmod 755 "$COMPOSE_DIR" "$LOG_DIR"
sudo find "$COMPOSE_DIR" -type d -exec chmod 755 {} \;
echo "‚úÖ –ü—Ä–∞–≤–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç —Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏."

  # ‚úÖ –ó–∞–ø–∏—Å –∏–ª–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ FQDN –≤ todo.modules (–∞–∫–æ –∏–º–∞–º–µ –≤–∞–ª–∏–¥–µ–Ω FQDN)
  if [[ -n "$FQDN" ]]; then
    if sudo grep -q '^FQDN=' "$MODULES_FILE" 2>/dev/null; then
      sudo sed -i "s|^FQDN=.*|FQDN=\"$FQDN\"|" "$MODULES_FILE"
    else
      echo "FQDN=\"$FQDN\"" | sudo tee -a "$MODULES_FILE" > /dev/null
    fi
  else
    echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–º –∑–∞–ø–∏—Å –Ω–∞ FQDN –≤ $MODULES_FILE (–ª–∏–ø—Å–≤–∞ –≤–∞–ª–∏–¥–µ–Ω FQDN)."
  fi

echo ""

  # ‚úÖ –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –º–æ–¥—É–ª–∞ (–∫–æ—Ä–µ–∫—Ç–Ω–∏—è—Ç –∫–ª—é—á –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
  if sudo grep -q '^MON_RESULT_MODULE2=' "$SETUP_ENV_FILE" 2>/dev/null; then
    sudo sed -i 's|^MON_RESULT_MODULE2=.*|MON_RESULT_MODULE2=‚úÖ|' "$SETUP_ENV_FILE"
    echo "MON_RESULT_MODULE2=‚úÖ"
  else
    echo "MON_RESULT_MODULE2=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi
fi
echo ""
echo ""

exit 0
# =====================================================================
# [–ú–û–î–£–õ 3] –°–∏—Å—Ç–µ–º–Ω–∏ —ä–ø–¥–µ–π—Ç–∏, SSH —Ç–≤—ä—Ä–¥—è–≤–∞–Ω–µ, UFW
# =====================================================================
log "[3] –°–ò–°–¢–ï–ú–ù–ò –ù–ê–°–¢–†–û–ô–ö–ò: —ä–ø–¥–µ–π—Ç–∏, SSH, UFW..."
log "=============================================="
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE3=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 3 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # –™–ø–¥–µ–π—Ç–∏
  sudo apt-get update -y
  sudo DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y

  # –ú–∏–Ω–∏–º–∞–ª–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏
  sudo apt-get install -y curl wget gnupg2 ca-certificates jq unzip software-properties-common ufw

  # SSH —Ç–≤—ä—Ä–¥—è–≤–∞–Ω–µ (–±–µ–∑ –¥–∞ –ø—Ä–µ—á–∏–º –Ω–∞ —Ç–µ–∫—É—â–∞—Ç–∞ —Å–µ—Å–∏—è)
  SSHD="/etc/ssh/sshd_config"
  sudo cp -a "$SSHD" "${SSHD}.bak.$(date +%F-%H%M%S)"
  sudo sed -i 's/^#\?PasswordAuthentication .*/PasswordAuthentication no/' "$SSHD"
  sudo sed -i 's/^#\?PermitRootLogin .*/PermitRootLogin no/' "$SSHD"
  sudo sed -i 's/^#\?X11Forwarding .*/X11Forwarding no/' "$SSHD"
  sudo systemctl reload ssh || sudo systemctl restart ssh

  # UFW ‚Äî –ø–æ–∑–≤–æ–ª—è–≤–∞–º–µ —Å–∞–º–æ –Ω—É–∂–Ω–æ—Ç–æ
  sudo ufw --force reset
  sudo ufw default deny incoming
  sudo ufw default allow outgoing
  sudo ufw allow OpenSSH
  sudo ufw allow 3000/tcp    # Grafana
  sudo ufw allow 9090/tcp    # Prometheus
  sudo ufw allow 9093/tcp    # Alertmanager
  sudo ufw allow 3100/tcp    # Loki
  sudo ufw allow 9100/tcp    # node_exporter
  sudo ufw allow 9115/tcp    # blackbox_exporter
  sudo ufw --force enable

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç —Å–∞–º–æ –ø—Ä–∏ —É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å + –ø–æ–∫–∞–∑–≤–∞–Ω–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  if sudo grep -q '^MON_RESULT_MODULE3=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE3=.*|MON_RESULT_MODULE3=‚úÖ|' "$SETUP_ENV_FILE"; then
      echo "MON_RESULT_MODULE3=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE3=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# ======================================================
# [–ú–û–î–£–õ 4] –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è –Ω–∞ Docker Engine + Compose (LTS)
# ======================================================
log "[4] DOCKER ENGINE + COMPOSE..."
log "==================================================="
log ""

# --- –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞ –Ω–∞—á–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–µ—á–µ –∏–∑–ø—ä–ª–Ω–µ–Ω –º–æ–¥—É–ª -----------------
if sudo grep -q '^MON_RESULT_MODULE4=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 4 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  MODULE_MARK="M4.docker"
  RESULT_KEY="MON_RESULT_MODULE4"

  # –û—Ñ–∏—Ü–∏–∞–ª–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ Docker
  sudo apt-get update -y
  sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

  # –ö–ª—é—á–æ–¥—ä—Ä–∂–∞—Ç–µ–ª –∑–∞ Docker (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
  sudo install -m 0755 -d /etc/apt/keyrings
  if [[ ! -f /etc/apt/keyrings/docker.gpg ]]; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
      | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod 0644 /etc/apt/keyrings/docker.gpg
  fi

  # –†–µ–ø–æ —Ñ–∞–π–ª (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
  UBUNTU_CODENAME="$(. /etc/os-release && echo "$UBUNTU_CODENAME")"
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu ${UBUNTU_CODENAME} stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # –†–∞–∑—Ä–µ—à–∞–≤–∞–º–µ –∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ Docker service
  sudo systemctl enable --now docker

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ –ú–æ–¥—É–ª 4 + –ø–æ–∫–∞–∑–≤–∞–Ω–µ –°–ê–ú–û –ø—Ä–∏ —É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å
  if sudo grep -q "^${RESULT_KEY}=" "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i "s|^${RESULT_KEY}=.*|${RESULT_KEY}=‚úÖ|" "$SETUP_ENV_FILE"; then
      echo "${RESULT_KEY}=‚úÖ"
    fi
  else
    echo "${RESULT_KEY}=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# ================================================================
# [–ú–û–î–£–õ 5] –ü–æ—Å—Ç–∏–Ω—Å—Ç–∞–ª–∞—Ü–∏–æ–Ω–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ Docker
# ================================================================
log "[5] DOCKER POST-INSTALL CONFIG & VALIDATION..."
log "=============================================================="
log ""

# --- –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞ –Ω–∞—á–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–µ—á–µ –∏–∑–ø—ä–ª–Ω–µ–Ω –º–æ–¥—É–ª -----------------
if sudo grep -q '^MON_RESULT_MODULE5=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 5 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  MODULE_MARK="M5.docker_post"
  RESULT_KEY="MON_RESULT_MODULE5"

  # -------------------------------
  # 1) –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞ daemon –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  # -------------------------------
  sudo install -d -m 0755 /etc/docker

  TMP_DAEMON="/tmp/daemon.json.$$.tmp"
  FINAL_DAEMON="/etc/docker/daemon.json"

  cat > "$TMP_DAEMON" <<'JSON'
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "features": { "buildkit": true },
  "live-restore": true,
  "log-driver": "local",
  "iptables": true
}
JSON

  DAEMON_CHANGED=0
  if [[ -f "$FINAL_DAEMON" ]]; then
    if ! sudo diff -q "$TMP_DAEMON" "$FINAL_DAEMON" >/dev/null 2>&1; then
      DAEMON_CHANGED=1
    fi
  else
    DAEMON_CHANGED=1
  fi

  if [[ "$DAEMON_CHANGED" -eq 1 ]]; then
    # (–æ–ø–∏—Ç –∑–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è, –∞–∫–æ –µ –Ω–∞–ª–∏—á–Ω–∞)
    if command -v dockerd >/dev/null 2>&1; then
      if sudo dockerd --validate --config "$TMP_DAEMON" >/dev/null 2>&1; then
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –º–∏–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è (dockerd --validate)."
      else
        echo "‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è—Ç–∞ —Å dockerd –Ω–µ—É—Å–ø–µ—à–Ω–∞. –ü—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–Ω–µ –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç."
        exit 1
      fi
    fi

    sudo mv "$TMP_DAEMON" "$FINAL_DAEMON"
    sudo chmod 0644 "$FINAL_DAEMON"
    echo "‚ñ∂ –û–±–Ω–æ–≤–µ–Ω /etc/docker/daemon.json"
    sudo systemctl daemon-reload
    sudo systemctl restart docker
  else
    rm -f "$TMP_DAEMON"
    echo "‚ÑπÔ∏è /etc/docker/daemon.json –±–µ–∑ –ø—Ä–æ–º—è–Ω–∞."
  fi

  # --------------------------------
  # 2) (–ü–æ –∏–∑–±–æ—Ä) –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤ –≥—Ä—É–ø–∞ docker
  #    –ó–∞–¥–∞–π—Ç–µ DOCKER_OPERATOR=<username> –≤ /etc/netgalaxy/todo.modules
  # --------------------------------
  TODO_FILE="/etc/netgalaxy/todo.modules"
  if [[ -f "$TODO_FILE" ]]; then
    DOCKER_OPERATOR="$(grep -E '^DOCKER_OPERATOR=' "$TODO_FILE" 2>/dev/null | cut -d'=' -f2)"
    if [[ -n "$DOCKER_OPERATOR" ]]; then
      if id "$DOCKER_OPERATOR" >/dev/null 2>&1; then
        if ! id -nG "$DOCKER_OPERATOR" | grep -qw docker; then
          sudo usermod -aG docker "$DOCKER_OPERATOR"
          echo "‚ñ∂ –î–æ–±–∞–≤–µ–Ω $DOCKER_OPERATOR –≤ –≥—Ä—É–ø–∞ docker (–∏–∑–∏—Å–∫–≤–∞ re-login)."
        else
          echo "‚ÑπÔ∏è $DOCKER_OPERATOR –≤–µ—á–µ –µ –≤ –≥—Ä—É–ø–∞ docker."
        fi
      else
        echo "‚ö†Ô∏è –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç $DOCKER_OPERATOR –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–Ω–µ."
      fi
    else
      echo "‚ÑπÔ∏è –ù—è–º–∞ –∑–∞–¥–∞–¥–µ–Ω DOCKER_OPERATOR ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –≥—Ä—É–ø–æ–≤–æ –¥–æ–±–∞–≤—è–Ω–µ."
    fi
  else
    echo "‚ÑπÔ∏è –ù—è–º–∞ $TODO_FILE ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –≥—Ä—É–ø–æ–≤–æ –¥–æ–±–∞–≤—è–Ω–µ."
  fi

  # --------------------------------
  # 3) Sanity checks –∏ —Ç–µ—Å—Ç–æ–≤–µ
  # --------------------------------
  echo "‚ñ∂ –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ Docker..."
  if ! sudo systemctl is-active --quiet docker; then
    echo "‚ùå –£—Å–ª—É–≥–∞—Ç–∞ docker –Ω–µ –µ –∞–∫—Ç–∏–≤–Ω–∞."
    exit 1
  fi

  docker --version || { echo "‚ùå –ù—è–º–∞ docker –±–∏–Ω–∞—Ä–Ω–∏–∫ –≤ PATH."; exit 1; }
  docker compose version || { echo "‚ùå –ù—è–º–∞ docker compose plugin."; exit 1; }

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ cgroup –¥—Ä–∞–π–≤–µ—Ä–∞ = systemd
  CGDRV="$(docker info --format '{{.CgroupDriver}}' 2>/dev/null || true)"
  if [[ "$CGDRV" != "systemd" ]]; then
    echo "‚ö†Ô∏è –û—á–∞–∫–≤–∞–Ω cgroupdriver=systemd, –∑–∞—Å–µ—á–µ–Ω: $CGDRV"
  else
    echo "‚úÖ CgroupDriver: systemd"
  fi

  # –¢–µ—Å—Ç–æ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (stateless)
  if docker run --rm hello-world >/dev/null 2>&1; then
    echo "‚úÖ hello-world –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ."
  else
    echo "‚ùå –ù–µ—É—Å–ø–µ—à–µ–Ω —Ç–µ—Å—Ç —Å hello-world."
    exit 1
  fi

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ –ú–æ–¥—É–ª 5 + –ø–æ–∫–∞–∑–≤–∞–Ω–µ –°–ê–ú–û –ø—Ä–∏ —É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å
  if sudo grep -q "^${RESULT_KEY}=" "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i "s|^${RESULT_KEY}=.*|${RESULT_KEY}=‚úÖ|" "$SETUP_ENV_FILE"; then
      echo "${RESULT_KEY}=‚úÖ"
    fi
  else
    echo "${RESULT_KEY}=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE" >/dev/null
    echo "${RESULT_KEY}=‚úÖ"
  fi

fi
echo ""
echo ""






exit 0




# =====================================================================
# [–ú–û–î–£–õ 5] –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç–µ–∫–∞
# =====================================================================
log ""
log "=============================================="
log "[5] –°–¢–ê–†–¢–ò–†–ê–ù–ï –ù–ê STACK-A..."
log "=============================================="
log ""

if ! already_done "M5.up"; then
  pushd "$COMPOSE_DIR" >/dev/null
  sudo docker compose up -d
  popd >/dev/null

  stamp "M5.up"
  mark_success "MONHUB_MODULE5"
  ok "–ú–æ–¥—É–ª 5 –∑–∞–≤—ä—Ä—à–∏. –°—Ç–µ–∫—ä—Ç –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω."
else
  warn "–ú–æ–¥—É–ª 5 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ."
fi

# =====================================================================
# [–ú–û–î–£–õ 6] –û–±–æ–±—â–µ–Ω–∏–µ
# =====================================================================
log ""
log "=============================================="
log "[6] –û–ë–û–ë–©–ï–ù–ò–ï"
log "=============================================="
log ""

GRAFANA_URL="http://$(hostname -I | awk '{print $1}'):3000"
PROM_URL="http://$(hostname -I | awk '{print $1}'):9090"

printf "\n"
printf "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫: \n"
printf "  ‚Ä¢ Grafana:        %s (admin / admin)\n" "$GRAFANA_URL"
printf "  ‚Ä¢ Prometheus:     %s\n" "$PROM_URL"
printf "  ‚Ä¢ Alertmanager:   http://<IP>:9093\n"
printf "  ‚Ä¢ Loki API:       http://<IP>:3100\n"
printf "  ‚Ä¢ node_exporter:  http://<IP>:9100/metrics\n"
printf "  ‚Ä¢ blackbox:       http://<IP>:9115/probe?target=https://example.org\n"
printf "\n–õ–æ–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s\n" "$LOG_DIR"
printf "Compose –ø–∞–ø–∫–∞:  %s\n" "$COMPOSE_DIR"
printf "\nUFW: –æ—Ç–≤–æ—Ä–µ–Ω–∏ –ø–æ—Ä—Ç–æ–≤–µ 22, 3000, 9090, 9093, 3100, 9100, 9115\n"

mark_success "MONHUB_MODULE6"
ok "–ì–æ—Ç–æ–≤–æ."
