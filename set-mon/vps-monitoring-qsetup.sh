#!/usr/bin/env bash

# ==========================================================================
#  vps-monitoring-qsetup ‚Äî –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ –∑–∞ MonHub
# --------------------------------------------------------------------------
#  –í–µ—Ä—Å–∏—è: 0.1-test
#  –î–∞—Ç–∞: 2025-08-10
#  –ê–≤—Ç–æ—Ä: NetGalaxySoft
# ==========================================================================
#
#  –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–ø–æ–ª–∞–≥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ (Prometheus, Grafana, Alertmanager,
#  Loki, Promtail, node_exporter, blackbox_exporter) –≤—ä—Ä—Ö—É MonHub.
#  –ò–∑–ø—ä–ª–Ω—è–≤–∞ —Å–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ (MonHub), –±–µ–∑ SSH –∫—ä–º –¥—Ä—É–≥–∏ –º–∞—à–∏–Ω–∏.
#
#  –ï—Ç–∞–ø–∏:
#    1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ
#    2. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
#    3. –†–∞–∑–ø–æ–ª–∞–≥–∞–Ω–µ –Ω–∞ Docker Compose —Å—Ç–µ–∫–∞
#    4. –ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞ –¥–æ—Å—Ç—ä–ø (UI —Å–∞–º–æ –ø—Ä–µ–∑ SSH —Ç—É–Ω–µ–ª; data —Å–∞–º–æ –ø–æ VPN)
#    5. –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç
# ==========================================================================

set -euo pipefail
set -o errtrace
trap 'echo "‚ùå –ì—Ä–µ—à–∫–∞ –Ω–∞ —Ä–µ–¥ $LINENO: ${BASH_COMMAND} (–∫–æ–¥ $?)" >&2' ERR

# === –ü–û–ú–û–©–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===================================================
show_help() {
  echo "–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: vps-monitoring-qsetup.sh [–æ–ø—Ü–∏—è]"
  echo ""
  echo "–†–∞–∑–ø–æ–ª–∞–≥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ –∑–∞ MonHub (Prometheus, Grafana, Alertmanager,"
  echo "Loki, Promtail, node_exporter, blackbox_exporter) —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏—Ç–µ –Ω–∞ NetGalaxySoft."
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --version       –ü–æ–∫–∞–∑–≤–∞ –≤–µ—Ä—Å–∏—è—Ç–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞"
  echo "  --help          –ü–æ–∫–∞–∑–≤–∞ —Ç–∞–∑–∏ –ø–æ–º–æ—â"
}

# === –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –û–ü–¶–ò–ò ====================================================
if [[ $# -gt 0 ]]; then
  case "$1" in
    --version)
      echo "vps-monitoring-qsetup –≤–µ—Ä—Å–∏—è 0.1-test (10 –∞–≤–≥—É—Å—Ç 2025 –≥.)"
      exit 0
      ;;
    --help)
      show_help
      exit 0
      ;;
    *)
      echo "‚ùå –ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –æ–ø—Ü–∏—è: $1"
      show_help
      exit 1
      ;;
  esac
fi

# –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∑–∞ –ø–æ-—è—Å–µ–Ω —Å—Ç–∞—Ä—Ç
command -v clear >/dev/null && clear || printf "\033c"

# –ó–µ–ª–µ–Ω –±–∞–Ω–µ—Ä –∑–∞ –∑–∞–≥–ª–∞–≤–∏–µ
echo -e "\033[92m====================================================================="
echo    "vps-monhub-qsetup.sh ‚Äî –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω —Å—ä—Ä–≤—ä—Ä –∑–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –ª–æ–≥–æ–≤–µ"
echo    "–í–µ—Ä—Å–∏—è: 1.0 (Ubuntu 24.04 amd64)"
echo    "–õ–∏—Ü–µ–Ω–∑: NetGalaxySoft internal"
echo -e "=====================================================================\033[0m"
echo ""
echo ""

NETGALAXY_DIR="/etc/netgalaxy"
MODULES_FILE="$NETGALAXY_DIR/todo.modules"
SETUP_ENV_FILE="$NETGALAXY_DIR/setup.env"
MON_ENV_FILE="$NETGALAXY_DIR/monitoring.env"

COMPOSE_DIR="/opt/netgalaxy/monhub"
PROM_DIR="$COMPOSE_DIR/prometheus"
ALERT_DIR="$COMPOSE_DIR/alertmanager"
LOKI_DIR="$COMPOSE_DIR/loki"
GRAFANA_DIR="$COMPOSE_DIR/grafana"

# --- –ú–∏–Ω–∏–º–∞–ª–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞–±–∏–ª–µ–Ω shim) ---
log()  { echo -e "$*"; }
ok()   { echo -e "‚úÖ $*"; }
warn() { echo -e "‚ö†Ô∏è  $*"; }
err()  { echo -e "‚ùå $*" >&2; }


# =====================================================================
# [–ú–û–î–£–õ 1] –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–ù–ò –ü–†–û–í–ï–†–ö–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =====================================================================
log "[1] –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–ù–ò –ü–†–û–í–ï–†–ö–ò –ù–ê –°–ò–°–¢–ï–ú–ê..."
log "-----------------------------------------------------------"
log ""

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ root –ø—Ä–∞–≤–∞
if [[ $EUID -ne 0 ]]; then
  echo "‚ùå –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å root –ø—Ä–∞–≤–∞ (sudo)."
  exit 1
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –±–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if [[ ! -f "$SETUP_ENV_FILE" ]] || ! sudo grep -q '^SETUP_VPS_BASE_STATUS=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "üõë –°—ä—Ä–≤—ä—Ä—ä—Ç –µ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–∞—á–∞–ª–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –ú–æ–ª—è, —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ —Ñ–∞–π–ª–∞ vps-base-qsetup.sh –∏ –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ."
  echo "üóëÔ∏è –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞."
  [[ -f "$0" ]] && rm -- "$0"
  exit 1
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–∫—Ä–∏–ø—Ç—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
if [[ -f "$SETUP_ENV_FILE" ]] && sudo grep -q '^SETUP_VPS_MONITORING_STATUS=‚úÖ' "$SETUP_ENV_FILE"; then
  echo "üõë –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç –≤–µ—á–µ –µ –±–∏–ª –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞ —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä."
  echo "–ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–µ –µ –ø–æ–∑–≤–æ–ª–µ–Ω–æ, –∑–∞ –¥–∞ —Å–µ –∏–∑–±–µ–≥–Ω–µ –ø–æ–≤—Ä–µ–¥–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞."
  [[ -f "$0" ]] && sudo rm -- "$0"
  exit 0
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞..."
if [[ -f /etc/os-release ]]; then
  source /etc/os-release
  OS_NAME=$ID
  OS_VERSION=$VERSION_ID
else
  echo "‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –û–°. –°–∫—Ä–∏–ø—Ç—ä—Ç –∏–∑–∏—Å–∫–≤–∞ Ubuntu –∏–ª–∏ Debian."
  exit 1
fi

SUPPORTED=false
if [[ "$OS_NAME" == "ubuntu" && ( "$OS_VERSION" == "22.04" || "$OS_VERSION" == "24.04" ) ]]; then
  SUPPORTED=true
elif [[ "$OS_NAME" == "debian" && ( "$OS_VERSION" == "11" || "$OS_VERSION" == "12" ) ]]; then
  SUPPORTED=true
fi

if [[ "$SUPPORTED" == false ]]; then
  echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ $PRETTY_NAME –Ω–µ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –æ—Ç —Ç–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç."
  echo "–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–∏ —Å–∏—Å—Ç–µ–º–∏: Ubuntu 22.04/24.04, Debian 11/12"
  exit 1
fi

echo "‚úÖ –ó–∞—Å–µ—á–µ–Ω–∞ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–∞ –û–°: $PRETTY_NAME"
echo ""

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE1=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 1 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
else
  # ‚úÖ –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ IP –∞–¥—Ä–µ—Å
  while true; do
    printf "üåê –í—ä–≤–µ–¥–µ—Ç–µ –ø—É–±–ª–∏—á–Ω–∏—è IP –∞–¥—Ä–µ—Å –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ (–∏–ª–∏ 'q' –∑–∞ –∏–∑—Ö–æ–¥): "
    read SERVER_IP

    if [[ "$SERVER_IP" == "q" || "$SERVER_IP" == "Q" ]]; then
      echo "‚ùé –°–∫—Ä–∏–ø—Ç—ä—Ç –±–µ—à–µ –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
      exit 0
    fi

    if ! [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω IP –∞–¥—Ä–µ—Å. –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω IPv4 –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: 192.168.1.100)."
      continue
    fi

    ACTUAL_IP=$(curl -s -4 ifconfig.me)

    if [[ "$ACTUAL_IP" != "$SERVER_IP" ]]; then
      echo ""
      echo "üö´ –ù–µ—Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ! –í—ä–≤–µ–¥–µ–Ω–∏—è—Ç IP ($SERVER_IP) –Ω–µ —Å—ä–≤–ø–∞–¥–∞ —Å —Ä–µ–∞–ª–Ω–∏—è IP –Ω–∞ –º–∞—à–∏–Ω–∞—Ç–∞ ($ACTUAL_IP)."
      echo ""
      read -p "üîÅ –ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –æ–ø–∏—Ç–∞—Ç–µ –æ—Ç–Ω–æ–≤–æ? [Enter –∑–∞ –î–ê, 'q' –∑–∞ –∏–∑—Ö–æ–¥]: " retry
      if [[ "$retry" == "q" || "$retry" == "Q" ]]; then
        echo "‚õî –°–∫—Ä–∏–ø—Ç—ä—Ç –±–µ—à–µ –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
        exit 0
      fi
      echo ""
    else
      echo "‚úÖ –ü–æ—Ç–≤—ä—Ä–¥–µ–Ω–æ: —Å–∫—Ä–∏–ø—Ç—ä—Ç –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ —Å IP $SERVER_IP."
      echo ""
      break
    fi
  done

  # ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–±—Ä–∞–Ω–∞—Ç–∞ –∑–∞ –ø—Ä–æ–º—è–Ω–∞/–∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
  if [[ -d "$NETGALAXY_DIR" ]]; then
    # 0) –°–≤–∞–ª—è–º–µ immutable —Ñ–ª–∞–≥–∞ –∏ –∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞
    sudo chattr -i "$NETGALAXY_DIR" 2>/dev/null || true

    # 1) –ü—ä—Ä–≤–æ —Å–≤–∞–ª—è–º–µ immutable —Ñ–ª–∞–≥–∞ (–∞–∫–æ –µ –∑–∞–¥–∞–¥–µ–Ω)
    [[ -f "$SETUP_ENV_FILE"      ]] && sudo chattr -i "$SETUP_ENV_FILE"       2>/dev/null || true
    [[ -f "$MODULES_FILE"        ]] && sudo chattr -i "$MODULES_FILE"         2>/dev/null || true
    [[ -f "$NETGALAXY_DIR/.nodelete" ]] && sudo chattr -i "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true

    # 2) –ü–æ—Å–ª–µ –∫–æ—Ä–∏–≥–∏—Ä–∞–º–µ —Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç –∏ –ø—Ä–∞–≤–∞ –ø–æ–æ—Ç–¥–µ–ª–Ω–æ (—Å–∞–º–æ –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç)
    sudo chown root:root "$NETGALAXY_DIR" 2>/dev/null || true
    sudo chmod 755 "$NETGALAXY_DIR"       2>/dev/null || true

    [[ -f "$SETUP_ENV_FILE"      ]] && { sudo chown root:root "$SETUP_ENV_FILE"      2>/dev/null || true; sudo chmod 644 "$SETUP_ENV_FILE"      2>/dev/null || true; }
    [[ -f "$MODULES_FILE"        ]] && { sudo chown root:root "$MODULES_FILE"        2>/dev/null || true; sudo chmod 644 "$MODULES_FILE"        2>/dev/null || true; }
    [[ -f "$NETGALAXY_DIR/.nodelete" ]] && { sudo chown root:root "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true; sudo chmod 644 "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true; }
  fi

  # ‚úÖ –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –ø—Ä–∞–∑–µ–Ω monitoring.env (–∞–∫–æ –ª–∏–ø—Å–≤–∞)
  if [[ ! -f "$MON_ENV_FILE" ]]; then
    sudo touch "$MON_ENV_FILE" \
      || { err "–ù–µ—É—Å–ø–µ—à–Ω–æ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ $MON_ENV_FILE"; exit 1; }
    sudo chown root:root "$MON_ENV_FILE" \
      || { err "–ù–µ—É—Å–ø–µ—à–Ω–∞ —Å–º—è–Ω–∞ –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç –∑–∞ $MON_ENV_FILE"; exit 1; }
    sudo chmod 0644 "$MON_ENV_FILE" \
      || { err "–ù–µ—É—Å–ø–µ—à–Ω–∞ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∑–∞ $MON_ENV_FILE"; exit 1; }
    ok "–°—ä–∑–¥–∞–¥–µ–Ω –ø—Ä–∞–∑–µ–Ω —Ñ–∞–π–ª: $MON_ENV_FILE"
  fi

  # ‚úÖ –ó–∞–ø–∏—Å –∏–ª–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ SERVER_IP –≤ todo.modules
  if sudo grep -q '^SERVER_IP=' "$MODULES_FILE" 2>/dev/null; then
    sudo sed -i "s|^SERVER_IP=.*|SERVER_IP=\"$SERVER_IP\"|" "$MODULES_FILE"
  else
    echo "SERVER_IP=\"$SERVER_IP\"" | sudo tee -a "$MODULES_FILE" > /dev/null
  fi

echo ""

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ –ú–æ–¥—É–ª 1
  if sudo grep -q '^MON_RESULT_MODULE1=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE1=.*|MON_RESULT_MODULE1=‚úÖ|' "$SETUP_ENV_FILE"; then
        echo "MON_RESULT_MODULE1=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE1=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# ===================================================================
# [–ú–û–î–£–õ 2] –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–ò (FQDN/IP, —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
# ===================================================================
log "[2] –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–ò (FQDN/IP, —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
log "-------------------------------------------------------------------------"
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE2=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 2 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- 2.1 FQDN: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ (—Å –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ override –ø—Ä–µ–∑ DOMAIN_EXPECTED) -----
  FQDN_CANDIDATE=""
  if [[ -n "${DOMAIN_EXPECTED:-}" ]]; then
    FQDN_CANDIDATE="$DOMAIN_EXPECTED"
    echo "‚ÑπÔ∏è DOMAIN_EXPECTED –µ –ø–æ–¥–∞–¥–µ–Ω: $FQDN_CANDIDATE"
  else
    # –û–ø–∏—Ç 1: hostname --fqdn; –û–ø–∏—Ç 2: hostname -f; –û–ø–∏—Ç 3: hostname
    FQDN_CANDIDATE="$(hostname --fqdn 2>/dev/null || hostname -f 2>/dev/null || hostname 2>/dev/null || true)"
    FQDN_CANDIDATE="$(printf '%s' "$FQDN_CANDIDATE" | tr -d '[:space:]')"
  fi

  FQDN_REGEX='^([a-zA-Z0-9][-a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$'
  if [[ -n "$FQDN_CANDIDATE" && "$FQDN_CANDIDATE" =~ $FQDN_REGEX ]]; then
    FQDN="$FQDN_CANDIDATE"
    echo "‚úÖ –ó–∞—Å–µ—á–µ–Ω FQDN: $FQDN"
  else
    echo "‚ö†Ô∏è  –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤–∞–ª–∏–¥–µ–Ω FQDN –æ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∞."
    FQDN=""
  fi

  # --- 2.2 IP –≤–∞–ª–∏–¥–∏—Ä–∞—Ü–∏–∏ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏, –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è) -----------------------------------
  ACTUAL_IP="$(curl -s -4 ifconfig.me || true)"
  [[ -n "$ACTUAL_IP" ]] && echo "‚ÑπÔ∏è  –ó–∞—Å–µ—á–µ–Ω –ø—É–±–ª–∏—á–µ–Ω IP –∞–¥—Ä–µ—Å: $ACTUAL_IP"

  if [[ -n "$FQDN" ]]; then
    FQDN_IPS="$(dig +short "$FQDN" A 2>/dev/null | tr '\n' ' ' | sed 's/ *$//')"
    if [[ -n "$FQDN_IPS" ]]; then
      echo "‚ÑπÔ∏è  DNS A –∑–∞–ø–∏—Å–∏ –∑–∞ $FQDN: $FQDN_IPS"
      if [[ -n "$ACTUAL_IP" ]] && grep -qw "$ACTUAL_IP" <<< "$FQDN_IPS"; then
        echo "‚úÖ $FQDN —Ä–µ–∑–æ–ª–≤–∏—Ä–∞ –∫—ä–º –ø—É–±–ª–∏—á–Ω–∏—è IP –Ω–∞ –º–∞—à–∏–Ω–∞—Ç–∞."
      else
        echo "‚ö†Ô∏è  –ù–µ—Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –ª–∏–ø—Å–∞ –Ω–∞ –ø—É–±–ª–∏—á–µ–Ω IP ‚Üî DNS A –∑–∞–ø–∏—Å–∏—Ç–µ."
      fi
    else
      echo "‚ö†Ô∏è  $FQDN –Ω–µ —Ä–µ–∑–æ–ª–≤–∏—Ä–∞ –∫—ä–º A –∑–∞–ø–∏—Å –≤ –º–æ–º–µ–Ω—Ç–∞."
    fi
  fi

  # --- 2.3 –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ -----------------
COMPOSE_DIR="/opt/netgalaxy/monhub"
PROM_DIR="$COMPOSE_DIR/prometheus"
ALERT_DIR="$COMPOSE_DIR/alertmanager"
LOKI_DIR="$COMPOSE_DIR/loki"
GRAFANA_DIR="$COMPOSE_DIR/grafana"
LOG_DIR="/var/log/netgalaxy"

echo "üìÅ –°—ä–∑–¥–∞–≤–∞–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
sudo mkdir -p "$COMPOSE_DIR" || exit 1
sudo mkdir -p "$PROM_DIR" || exit 1
sudo mkdir -p "$ALERT_DIR" || exit 1
sudo mkdir -p "$LOKI_DIR" || exit 1
sudo mkdir -p "$GRAFANA_DIR" || exit 1
sudo mkdir -p "$LOG_DIR" || exit 1
echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏."

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º –ø—Ä–∞–≤–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç..."
sudo chown -R root:root "$COMPOSE_DIR" "$LOG_DIR"
sudo chmod 755 "$COMPOSE_DIR" "$LOG_DIR"
sudo find "$COMPOSE_DIR" -type d -exec chmod 755 {} \;
echo "‚úÖ –ü—Ä–∞–≤–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç —Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏."

  # ‚úÖ –ó–∞–ø–∏—Å –∏–ª–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ FQDN –≤ todo.modules (–∞–∫–æ –∏–º–∞–º–µ –≤–∞–ª–∏–¥–µ–Ω FQDN)
  if [[ -n "$FQDN" ]]; then
    if sudo grep -q '^FQDN=' "$MODULES_FILE" 2>/dev/null; then
      sudo sed -i "s|^FQDN=.*|FQDN=\"$FQDN\"|" "$MODULES_FILE"
    else
      echo "FQDN=\"$FQDN\"" | sudo tee -a "$MODULES_FILE" > /dev/null
    fi
  else
    echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–º –∑–∞–ø–∏—Å –Ω–∞ FQDN –≤ $MODULES_FILE (–ª–∏–ø—Å–≤–∞ –≤–∞–ª–∏–¥–µ–Ω FQDN)."
  fi

echo ""

  # ‚úÖ –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –º–æ–¥—É–ª–∞ (–∫–æ—Ä–µ–∫—Ç–Ω–∏—è—Ç –∫–ª—é—á –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
  if sudo grep -q '^MON_RESULT_MODULE2=' "$SETUP_ENV_FILE" 2>/dev/null; then
    sudo sed -i 's|^MON_RESULT_MODULE2=.*|MON_RESULT_MODULE2=‚úÖ|' "$SETUP_ENV_FILE"
    echo "MON_RESULT_MODULE2=‚úÖ"
  else
    echo "MON_RESULT_MODULE2=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi
fi
echo ""
echo ""


# =====================================================================
# [–ú–û–î–£–õ 3] –°–∏—Å—Ç–µ–º–Ω–∏ —ä–ø–¥–µ–π—Ç–∏, SSH (–±–µ–∑ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ root/–ø–∞—Ä–æ–ª–∏), UFW
# =====================================================================
log "[3] –°–ò–°–¢–ï–ú–ù–ò –ù–ê–°–¢–†–û–ô–ö–ò: —ä–ø–¥–µ–π—Ç–∏, SSH, UFW..."
log "=============================================="
log ""

if sudo grep -q '^MON_RESULT_MODULE3=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 3 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- –™–ø–¥–µ–π—Ç–∏ (noninteractive) ---
  sudo apt-get update -y
  sudo DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y

  # --- –ú–∏–Ω–∏–º–∞–ª–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ ---
  sudo apt-get install -y curl wget gnupg2 ca-certificates jq unzip software-properties-common ufw

  # --- –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∞–ª–Ω–∏—Ç–µ SSH –ø–æ—Ä—Ç–æ–≤–µ ---
  SSHD="/etc/ssh/sshd_config"
  SSHD_BIN="$(command -v sshd || echo /usr/sbin/sshd)"

  # 1) —Å–ª—É—à–∞—â–∏ –ø–æ—Ä—Ç–æ–≤–µ –Ω–∞ sshd (live)
  mapfile -t SSH_PORTS < <(ss -ltnp 2>/dev/null | awk '/sshd/ {split($4,a,":"); print a[length(a)]}' | sort -u)

  # 2) fallback: –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ (–≤–∫–ª. –≤–∫–ª—é—á–µ–Ω–∏ *.conf)
  if [[ ${#SSH_PORTS[@]} -eq 0 ]]; then
    mapfile -t SSH_PORTS < <(
      { awk '/^\s*Port\s+[0-9]+/ {print $2}' "$SSHD" 2>/dev/null; \
        awk '/^\s*Port\s+[0-9]+/ {print $2}' /etc/ssh/sshd_config.d/*.conf 2>/dev/null; } \
      | awk 'NF' | sort -u
    )
  fi

  # 3) —Ñ–∏–Ω–∞–ª–µ–Ω fallback
  [[ ${#SSH_PORTS[@]} -eq 0 ]] && SSH_PORTS=(22)

  # --- SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–±–µ–∑ –¥–∞ –∑–∞–±—Ä–∞–Ω—è–≤–∞–º–µ root/–ø–∞—Ä–æ–ª–∏ –Ω–∞ —Ç–æ–∑–∏ –µ—Ç–∞–ø) ---
  sudo cp -a "$SSHD" "${SSHD}.bak.$(date +%F-%H%M%S)" 2>/dev/null || true
  sudo sed -i 's/^#\?X1\?1Forwarding .*/X11Forwarding no/' "$SSHD" 2>/dev/null || true

  # –¢–µ—Å—Ç –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω reload (–Ω–∏–∫–æ–≥–∞ restart)
  if sudo "$SSHD_BIN" -t; then
    sudo systemctl reload ssh || sudo systemctl reload sshd || true
  else
    warn "–ù–µ–≤–∞–ª–∏–¥–µ–Ω sshd_config. –í—Ä—ä—â–∞–º backup."
    sudo cp -a "${SSHD}.bak."* "$SSHD" 2>/dev/null || true
  fi

  # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ UFW –ø—Ä–∞–≤–∏–ª–∞—Ç–∞ (–ø—Ä–µ–≥–ª–µ–¥ –ø—Ä–µ–¥–∏ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ) ---
  # –°–ø–∏—Å—ä–∫ —Å –ø–æ—Ä—Ç–æ–≤–µ, –∫–æ–∏—Ç–æ —â–µ –±—ä–¥–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏ (TCP)
  ALLOW_PORTS=( "${SSH_PORTS[@]}" 22 3000 9090 9093 3100 9100 9115 )

  # –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –¥—É–±–ª–∏—Ä–∞–Ω–∏/–ø—Ä–∞–∑–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
  declare -A _seen
  UNIQUE_PORTS=()

  for p in "${ALLOW_PORTS[@]}"; do
    [[ -n "$p" ]] || continue
    if [[ -z "${_seen["$p"]+x}" ]]; then
      UNIQUE_PORTS+=("$p")
      _seen["$p"]=1
    fi
  done

  echo ""
  echo "üõ°Ô∏è  –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–µ–Ω –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ UFW –ø—Ä–∞–≤–∏–ª–∞—Ç–∞:"
  echo "    –ü–æ–ª–∏—Ç–∏–∫–∏: incoming=DENY, outgoing=ALLOW"
  echo "    –©–µ –±—ä–¥–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏ —Å–ª–µ–¥–Ω–∏—Ç–µ –≤—Ö–æ–¥—è—â–∏ TCP –ø–æ—Ä—Ç–æ–≤–µ:"
  for p in "${UNIQUE_PORTS[@]}"; do
    echo "      ‚Ä¢ allow ${p}/tcp"
  done
  echo ""
  
  # --- –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ UFW ---
  _ans=""
  while true; do
    echo "‚ñ∂ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ UFW? [Enter=–î–ê/y/yes/–¥/–¥–∞]"
    read -r -p "–∏–ª–∏ [n/no/–Ω–µ/q –∑–∞ –û–¢–ö–ê–ó]: " _ans || _ans=""
    _ans_lc="$(printf '%s' "${_ans}" | tr '[:upper:]' '[:lower:]')"

    case "$_ans_lc" in
      ""|"y"|"yes"|"–¥"|"–¥–∞")
        # –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ
        break
        ;;
      "n"|"no"|"–Ω–µ"|"q")
        warn "–ü—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–Ω–µ –Ω–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –ø—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ UFW."
        echo ""
        exit 0
        ;;
      *)
        echo "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä. –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter (–î–ê) –∏–ª–∏ –≤—ä–≤–µ–¥–µ—Ç–µ n/no/–Ω–µ/q (–û–¢–ö–ê–ó)."
        ;;
    esac
  done

  # --- UFW –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ ---
  sudo ufw --force reset
  sudo ufw default deny incoming
  sudo ufw default allow outgoing
  for p in "${UNIQUE_PORTS[@]}"; do
    sudo ufw allow "${p}/tcp"
  done
  sudo ufw --force enable

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç
  if sudo grep -q '^MON_RESULT_MODULE3=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE3=.*|MON_RESULT_MODULE3=‚úÖ|' "$SETUP_ENV_FILE"; then
      echo "MON_RESULT_MODULE3=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE3=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi
  
fi
echo ""
echo ""


# ======================================================
# [–ú–û–î–£–õ 4] –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è –Ω–∞ Docker Engine + Compose (LTS)
# ======================================================
log "[4] DOCKER ENGINE + COMPOSE..."
log "==================================================="
log ""

# --- –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞ –Ω–∞—á–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–µ—á–µ –∏–∑–ø—ä–ª–Ω–µ–Ω –º–æ–¥—É–ª -----------------
if sudo grep -q '^MON_RESULT_MODULE4=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 4 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  MODULE_MARK="M4.docker"
  RESULT_KEY="MON_RESULT_MODULE4"

  # –û—Ñ–∏—Ü–∏–∞–ª–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ Docker
  sudo apt-get update -y
  sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

  # –ö–ª—é—á–æ–¥—ä—Ä–∂–∞—Ç–µ–ª –∑–∞ Docker (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
  sudo install -m 0755 -d /etc/apt/keyrings
  if [[ ! -f /etc/apt/keyrings/docker.gpg ]]; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
      | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod 0644 /etc/apt/keyrings/docker.gpg
  fi

  # –†–µ–ø–æ —Ñ–∞–π–ª (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
  UBUNTU_CODENAME="$(. /etc/os-release && echo "$UBUNTU_CODENAME")"
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu ${UBUNTU_CODENAME} stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # –†–∞–∑—Ä–µ—à–∞–≤–∞–º–µ –∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ Docker service
  sudo systemctl enable --now docker

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ –ú–æ–¥—É–ª 4 + –ø–æ–∫–∞–∑–≤–∞–Ω–µ –°–ê–ú–û –ø—Ä–∏ —É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å
  if sudo grep -q "^${RESULT_KEY}=" "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i "s|^${RESULT_KEY}=.*|${RESULT_KEY}=‚úÖ|" "$SETUP_ENV_FILE"; then
      echo "${RESULT_KEY}=‚úÖ"
    fi
  else
    echo "${RESULT_KEY}=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# =====================================================================
# [–ú–û–î–£–õ 5] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ (Prometheus, Alertmanager, Blackbox, Loki, Promtail, Grafana)
# =====================================================================
log "[5] –ú–û–ù–¢–û–†–ò–ù–ì –°–¢–ï–ö: Prometheus, Alertmanager, Blackbox, Loki, Promtail, Grafana..."
log "===================================================================================="
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE5=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 5 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
# --- 1) –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø—Ä–∞–≤–∞ –∏ .env ---

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–≤—Å–∏—á–∫–æ –Ω—É–∂–Ω–æ –∑–∞ bind mounts)
sudo mkdir -p \
  "$PROM_DIR/data" \
  "$ALERT_DIR/data" \
  "$LOKI_DIR/data" \
  "$GRAFANA_DIR/data" \
  "$GRAFANA_DIR/provisioning/datasources" \
  "$GRAFANA_DIR/plugins" \
  "$COMPOSE_DIR/blackbox"

# –ü—Ä–∞–≤–∞ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–∏ UID/GID)
sudo chown -R 65534:65534 "$PROM_DIR/data" "$ALERT_DIR/data"   || { err "chown prom/alert data"; exit 1; }
sudo chown -R 10001:10001 "$LOKI_DIR"                           || { err "chown loki"; exit 1; }
sudo chown -R 472:472   "$GRAFANA_DIR"                          || { err "chown grafana"; exit 1; }

# –ü–æ-—â–∞–¥—è—â–æ, –Ω–æ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ
sudo chmod -R u+rwX,g+rwX "$GRAFANA_DIR" "$LOKI_DIR" || { err "chmod grafana/loki"; exit 1; }

# .env –∑–∞ docker compose (–ø—ä—Ç–∏—â–∞ –∏ –±–∞–∑–æ–≤–∏ –∫—Ä–µ–¥–µ–Ω—à—ä–ª–∏)
sudo tee "$COMPOSE_DIR/.env" >/dev/null <<EOF
PROM_DIR=$PROM_DIR
ALERT_DIR=$ALERT_DIR
LOKI_DIR=$LOKI_DIR
GRAFANA_DIR=$GRAFANA_DIR

# –í—Ä–µ–º–µ–Ω–Ω–∏ Grafana –∫—Ä–µ–¥–µ–Ω—à—ä–ª–∏ (—â–µ —Å–µ —Å–º–µ–Ω—è—Ç –≤ security –º–æ–¥—É–ª)
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin
EOF

# --- 2) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

  # Prometheus (targets: –ª–æ–∫–∞–ª–µ–Ω node_exporter, blackbox, —Å–∞–º–∏—è prometheus, alertmanager)
  sudo tee "$PROM_DIR/prometheus.yml" >/dev/null <<'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

alerting:
  alertmanagers:
    - static_configs:
        - targets: ['alertmanager:9093']

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['prometheus:9090']

  - job_name: 'node'
    static_configs:
      - targets: ['node_exporter:9100']

  - job_name: 'blackbox_http'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - https://example.org
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox:9115
EOF

  # Alertmanager (–º–∏–Ω–∏–º–∞–ª–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äì –±–µ–∑ —Ä–µ–∞–ª–Ω–∏ –º–∞—Ä—à—Ä—É—Ç–∏)
  sudo tee "$ALERT_DIR/alertmanager.yml" >/dev/null <<'EOF'
route:
  receiver: 'null'
receivers:
  - name: 'null'
EOF

  # Blackbox Exporter
  sudo tee "$COMPOSE_DIR/blackbox/blackbox.yml" >/dev/null <<'EOF'
modules:
  http_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2"]
      preferred_ip_protocol: "ip4"
  icmp:
    prober: icmp
    timeout: 5s
EOF

  # Loki
  sudo tee "$LOKI_DIR/config.yml" >/dev/null <<'EOF'
server:
  http_listen_port: 3100
  grpc_listen_port: 9096

auth_enabled: false

common:
  path_prefix: /loki
  storage:
    filesystem:
      chunks_directory: /loki/chunks
      rules_directory: /loki/rules
  ring:
    instance_addr: 127.0.0.1
    kvstore:
      store: inmemory

schema_config:
  configs:
    - from: 2024-01-01
      store: boltdb-shipper
      object_store: filesystem
      schema: v13
      index:
        prefix: index_
        period: 24h

ruler:
  alertmanager_url: http://alertmanager:9093
EOF

  # Promtail (—Å—ä–±–∏—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–∏ –ª–æ–≥–æ–≤–µ –∏ –≥–∏ –ø—Ä–∞—â–∞ –∫—ä–º Loki)
  sudo tee "$LOKI_DIR/promtail-config.yml" >/dev/null <<'EOF'
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*.log
  - job_name: journal
    journal:
      path: /var/log/journal
      max_age: 12h
      labels:
        job: systemd-journal
    relabel_configs:
      - source_labels: ['__journal__systemd_unit']
        target_label: 'unit'
EOF

  # Grafana datasource provisioning (Prometheus + Loki)
  sudo tee "$GRAFANA_DIR/provisioning/datasources/datasource.yml" >/dev/null <<'EOF'
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
  - name: Loki
    type: loki
    access: proxy
    url: http://loki:3100
EOF

  # --- 3) docker-compose.yml ---
  sudo tee "$COMPOSE_DIR/docker-compose.yml" >/dev/null <<'EOF'
services:
  node_exporter:
    image: prom/node-exporter:v1.8.2
    container_name: monhub_node_exporter
    command:
      - '--path.rootfs=/rootfs'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    restart: unless-stopped
    networks: [monhub]

  prometheus:
    image: prom/prometheus:latest
    container_name: monhub_prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=15d
    volumes:
      - ${PROM_DIR}/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${PROM_DIR}/data:/prometheus
      - ${PROM_DIR}/targets:/etc/prometheus/targets:ro
      - ${PROM_DIR}/rules:/etc/prometheus/rules:ro
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 15s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks: [monhub]

  alertmanager:
    image: prom/alertmanager:latest
    container_name: monhub_alertmanager
    volumes:
      - ${ALERT_DIR}/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ${ALERT_DIR}/data:/alertmanager
    ports:
      - "9093:9093"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9093/-/ready"]
      interval: 15s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks: [monhub]

  blackbox:
    image: prom/blackbox-exporter:latest
    container_name: monhub_blackbox
    volumes:
      - ./blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    ports:
      - "9115:9115"
    restart: unless-stopped
    networks: [monhub]

  loki:
    image: grafana/loki:2.9.8
    container_name: monhub_loki
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ${LOKI_DIR}/config.yml:/etc/loki/config.yml:ro
      - ${LOKI_DIR}/data:/loki
    ports:
      - "3100:3100"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 15s
      timeout: 5s
      retries: 20
    restart: unless-stopped
    networks: [monhub]

  promtail:
    image: grafana/promtail:2.9.8
    container_name: monhub_promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log:ro
      - /var/log/journal:/var/log/journal:ro
      - /run/log/journal:/run/log/journal:ro
      - /etc/machine-id:/etc/machine-id:ro
      - ${LOKI_DIR}/promtail-config.yml:/etc/promtail/config.yml:ro
    restart: unless-stopped
    networks: [monhub]

  grafana:
    image: grafana/grafana:10.4.6
    container_name: monhub_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ${GRAFANA_DIR}/data:/var/lib/grafana
      - ${GRAFANA_DIR}/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 20
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    networks: [monhub]

networks:
  monhub:
    driver: bridge
EOF

# --- 3.5) –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (fixed) ---

# Prometheus: promtool check config
sudo docker run --rm \
  -v "$PROM_DIR:/etc/prometheus:ro" \
  --entrypoint /bin/promtool \
  prom/prometheus:latest \
  check config /etc/prometheus/prometheus.yml \
  || { err "Prometheus –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞."; exit 1; }

# Alertmanager: amtool check-config
sudo docker run --rm \
  -v "$ALERT_DIR:/etc/alertmanager:ro" \
  --entrypoint /bin/amtool \
  prom/alertmanager:latest \
  check-config /etc/alertmanager/alertmanager.yml \
  || { err "Alertmanager –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞."; exit 1; }

# Loki: –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
sudo docker run --rm \
  -v "$LOKI_DIR/config.yml:/etc/loki/config.yml:ro" \
  -v "$LOKI_DIR/data:/loki" \
  --user 10001:10001 \
  grafana/loki:2.9.8 \
  -config.file=/etc/loki/config.yml -verify-config \
  || { err "Loki –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞."; exit 1; }

ok "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏—Ç–µ —Å–∞ –≤–∞–ª–∏–¥–Ω–∏. –°—Ç–∞—Ä—Ç–∏—Ä–∞–º —Å—Ç–µ–∫–∞..."

  # --- 4) –°—Ç–∞—Ä—Ç –Ω–∞ —Å—Ç–µ–∫–∞ ---
  (cd "$COMPOSE_DIR" && sudo docker compose pull && sudo docker compose up -d)

  # --- 5) systemd unit –∑–∞ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç ---
  sudo tee /etc/systemd/system/monhub.service >/dev/null <<EOF
[Unit]
Description=NetGalaxy MonHub Stack (Prometheus/Alertmanager/Loki/Grafana)
Wants=docker.service
After=docker.service

[Service]
Type=oneshot
WorkingDirectory=$COMPOSE_DIR
RemainAfterExit=true
ExecStart=/usr/bin/docker compose up -d
ExecStop=/usr/bin/docker compose down

[Install]
WantedBy=multi-user.target
EOF

  sudo systemctl daemon-reload
  sudo systemctl enable --now monhub.service

  # ‚úÖ –ü—É–±–ª–∏–∫—É–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ä—Ç–æ–≤–µ –∑–∞ –ú–æ–¥—É–ª 10
  upsert_kv(){ local k="$1" v="$2"; if sudo grep -q "^${k}=" "$MODULES_FILE" 2>/dev/null; then
  sudo sed -i "s|^${k}=.*|${k}=${v}|" "$MODULES_FILE"; else echo "${k}=${v}" | sudo tee -a "$MODULES_FILE" >/dev/null; fi; }
  upsert_kv GRAFANA_PORT 3000
  upsert_kv PROMETHEUS_PORT 9090
  upsert_kv LOKI_PORT 3100
  upsert_kv ALERTMANAGER_PORT 9093
  upsert_kv NODE_EXPORTER_PORT 9100
  # BLACKBOX_EXPORTER_PORT —Å–µ –∑–∞–¥–∞–≤–∞ –≤ –ú–æ–¥—É–ª 7 (9115)


  # --- 6) –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç ---
  if sudo grep -q '^MON_RESULT_MODULE5=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE5=.*|MON_RESULT_MODULE5=‚úÖ|' "$SETUP_ENV_FILE"; then
      echo "MON_RESULT_MODULE5=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE5=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""

# =====================================================================
# [–ú–û–î–£–õ 6] Node Exporter (—Ö–æ—Å—Ç –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ Prometheus)
# =====================================================================
log "[6] NODE EXPORTER: –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus..."
log "=========================================================="
log ""

if sudo grep -q '^MON_RESULT_MODULE6=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 6 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- 1) –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: node_exporter –µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω –≤ docker-compose.yml ---
  sudo test -f "$COMPOSE_DIR/docker-compose.yml" || { err "–õ–∏–ø—Å–≤–∞ $COMPOSE_DIR/docker-compose.yml"; exit 1; }
  if ! (cd "$COMPOSE_DIR" && sudo docker compose config --services | grep -xq 'node_exporter'); then
    err "–õ–∏–ø—Å–≤–∞ service 'node_exporter' –≤ docker-compose.yml (–ú–æ–¥—É–ª 5)."
    exit 1
  fi

  # --- 2) –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ/–æ—Å–∏–≥—É—Ä—è–≤–∞–Ω–µ –Ω–∞ —É—Å–ª—É–≥–∞—Ç–∞ ---
  (cd "$COMPOSE_DIR" && sudo docker compose up -d node_exporter) || { err "–ù–µ—É—Å–ø–µ—à–µ–Ω —Å—Ç–∞—Ä—Ç –Ω–∞ node_exporter"; exit 1; }

  # --- 3) Health –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ node_exporter (–ø–æ—Ä—Ç 9100) ---
  ok "–ò–∑–≤—ä—Ä—à–≤–∞–º health –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ http://127.0.0.1:9100/metrics ..."
  tries=0
  until curl -fsS http://127.0.0.1:9100/metrics >/dev/null 2>&1; do
    tries=$((tries+1))
    [[ $tries -ge 15 ]] && { err "node_exporter –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è –Ω–∞ –ø–æ—Ä—Ç 9100"; exit 1; }
    sleep 1
  done
  ok "node_exporter –µ –¥–æ—Å—Ç—ä–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç 9100."

  # --- 4) –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: Prometheus –∏–º–∞ target –∫—ä–º node_exporter:9100 ---
  sudo test -f "$PROM_DIR/prometheus.yml" || { err "–õ–∏–ø—Å–≤–∞ $PROM_DIR/prometheus.yml (–ú–æ–¥—É–ª 5)"; exit 1; }
  if ! grep -q "node_exporter:9100" "$PROM_DIR/prometheus.yml"; then
    err "–í $PROM_DIR/prometheus.yml –Ω—è–º–∞ target 'node_exporter:9100'. –ü–æ–ø—Ä–∞–≤–∏ –ú–æ–¥—É–ª 5 (scrape_configs ‚Üí job 'node')."
    exit 1
  fi

  # --- 5) –í–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –∏ —Ä–µ—Å—Ç–∞—Ä—Ç —Å–∞–º–æ –Ω–∞ Prometheus ---
  sudo docker run --rm \
    -v "$PROM_DIR:/etc/prometheus:ro" \
    --entrypoint /bin/promtool \
    prom/prometheus:latest \
    check config /etc/prometheus/prometheus.yml \
    || { err "Prometheus –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞."; exit 1; }

  (cd "$COMPOSE_DIR" && sudo docker compose up -d prometheus) || { err "–ù–µ—É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ Prometheus"; exit 1; }
  ok "Prometheus –µ –∞–∫—Ç–∏–≤–µ–Ω —Å node_exporter target."

  # --- 6) –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç ---
  if sudo grep -q '^MON_RESULT_MODULE6=' "$SETUP_ENV_FILE" 2>/dev/null; then
    sudo sed -i 's|^MON_RESULT_MODULE6=.*|MON_RESULT_MODULE6=‚úÖ|' "$SETUP_ENV_FILE" && echo "MON_RESULT_MODULE6=‚úÖ"
  else
    echo "MON_RESULT_MODULE6=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi
fi
echo ""
echo ""


# =====================================================================
# [–ú–û–î–£–õ 7] Blackbox targets (file_sd) + –ø—Ä–æ–º–µ–Ω–∏ –≤ Prometheus/Compose
# =====================================================================
log "[7] BLACKBOX TARGETS: –¥–∏–Ω–∞–º–∏—á–Ω–∏ —Ü–µ–ª–∏ –ø—Ä–µ–∑ file_sd..."
log "===================================================="
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if [[ -f "$SETUP_ENV_FILE" ]] && sudo grep -Fxq 'MON_RESULT_MODULE7=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 7 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- 1) –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏ targets —Ñ–∞–π–ª –∑–∞ Blackbox ---
  sudo mkdir -p "$PROM_DIR/targets"

  # –°—ä–∑–¥–∞–π –¥–µ—Ñ–æ–ª—Ç–µ–Ω —Å–ø–∏—Å—ä–∫ —Å —Ü–µ–ª–∏, –∞–∫–æ –ª–∏–ø—Å–≤–∞ —Ñ–∞–π–ª—ä—Ç
  if [[ ! -f "$PROM_DIR/targets/blackbox_http.yml" ]]; then
    sudo tee "$PROM_DIR/targets/blackbox_http.yml" >/dev/null <<'EOF'
- targets:
    # –í—ä—Ç—Ä–µ—à–Ω–∏ —Ü–µ–ª–∏ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –≤ –º—Ä–µ–∂–∞—Ç–∞ "monhub")
    - http://prometheus:9090
    - http://alertmanager:9093
    - http://grafana:3000
    # –ü—Ä–∏–º–µ—Ä–Ω–∞ –≤—ä–Ω—à–Ω–∞ —Ü–µ–ª
    - https://www.debian.org
EOF
  fi

  # --- 2) –ò–Ω–∂–µ–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ file_sd_configs –≤ prometheus.yml (–∞–∫–æ –ª–∏–ø—Å–≤–∞) ---
  if ! grep -q 'file_sd_configs:' "$PROM_DIR/prometheus.yml"; then
    tmp_prom="/tmp/prom.$$"
    sudo cp -a "$PROM_DIR/prometheus.yml" "${PROM_DIR}/prometheus.yml.bak.$(date +%F-%H%M%S)"
    sudo awk '
      BEGIN{injob=0; done=0}
      # –∑–∞—Å–∏—á–∞–º–µ –Ω–∞—á–∞–ª–æ –Ω–∞ job-–∞ blackbox_http
      /^\s*-\s*job_name:\s*'\''blackbox_http'\''\s*$/ {injob=1}
      # —Å–ª–µ–¥ —Ä–µ–¥–∞ —Å module: [http_2xx] –∏–Ω–∂–µ–∫—Ç–∏—Ä–∞–º–µ file_sd_configs (—Å–∞–º–æ –≤–µ–¥–Ω—ä–∂)
      injob==1 && /^\s*module:\s*\[http_2xx\]\s*$/ && done==0 {
        print
        print "    file_sd_configs:"
        print "      - files:"
        print "        - /etc/prometheus/targets/blackbox_http.yml"
        done=1
        next
      }
      # –∏–∑–ª–∏–∑–∞–º–µ –æ—Ç job —Å–µ–∫—Ü–∏—è—Ç–∞ –ø—Ä–∏ —Å–ª–µ–¥–≤–∞—â job_name: –∏–ª–∏ –∫—Ä–∞—è –Ω–∞ —Ñ–∞–π–ª–∞
      injob==1 && /^\s*-\s*job_name:\s*'\''/ && $0 !~ /blackbox_http/ {injob=0}
      {print}
    ' "$PROM_DIR/prometheus.yml" > "$tmp_prom" && sudo mv "$tmp_prom" "$PROM_DIR/prometheus.yml"
  fi

  # --- 3) –ü—Ä–µ–∑–∞—Ä–µ–¥–∏ —Å–∞–º–æ Prometheus, –∑–∞ –¥–∞ –≤–∑–µ–º–µ –Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏/targets ---
  if [[ -d "$COMPOSE_DIR" ]]; then
    (cd "$COMPOSE_DIR" && sudo docker compose up -d prometheus)
    ok "Prometheus –µ –ø—Ä–µ–∑–∞—Ä–µ–¥–µ–Ω —Å file_sd targets."
  else
    err "–õ–∏–ø—Å–≤–∞ COMPOSE_DIR ($COMPOSE_DIR) ‚Äì –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –ú–æ–¥—É–ª 5."
    exit 1
  fi

  # ‚úÖ –§–∏–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–µ: –ø—Ä–∞–≤–∞ –∏ –∑–∞–ø–∏—Å –≤ todo.modules –∑–∞ –ú–æ–¥—É–ª 10
  sudo chmod 0644 "$PROM_DIR/targets/blackbox_http.yml" || true

  # –ü—ä—Ç –∫—ä–º —Ñ–∞–π–ª–∞ —Å —Ü–µ–ª–∏
  if sudo grep -q '^BLACKBOX_TARGETS_FILE=' "$MODULES_FILE" 2>/dev/null; then
    sudo sed -i 's|^BLACKBOX_TARGETS_FILE=.*|BLACKBOX_TARGETS_FILE="'"$PROM_DIR/targets/blackbox_http.yml"'"|' "$MODULES_FILE"
  else
    echo 'BLACKBOX_TARGETS_FILE="'"$PROM_DIR/targets/blackbox_http.yml"'"' | sudo tee -a "$MODULES_FILE" >/dev/null
  fi

  # –ü–æ—Ä—Ç –Ω–∞ Blackbox Exporter (–∑–∞ –ú–æ–¥—É–ª 10)
  if sudo grep -q '^BLACKBOX_EXPORTER_PORT=' "$MODULES_FILE" 2>/dev/null; then
    sudo sed -i 's|^BLACKBOX_EXPORTER_PORT=.*|BLACKBOX_EXPORTER_PORT=9115|' "$MODULES_FILE"
  else
    echo 'BLACKBOX_EXPORTER_PORT=9115' | sudo tee -a "$MODULES_FILE" >/dev/null
  fi

  # --- 5) –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç ---
  if sudo grep -q '^MON_RESULT_MODULE7=' "$SETUP_ENV_FILE" 2>/dev/null; then
    sudo sed -i 's|^MON_RESULT_MODULE7=.*|MON_RESULT_MODULE7=‚úÖ|' "$SETUP_ENV_FILE" && echo "MON_RESULT_MODULE7=‚úÖ"
  else
    echo "MON_RESULT_MODULE7=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# =====================================================================
# [–ú–û–î–£–õ 8] –ë–∞–∑–æ–≤–∏ –∞–ª—ä—Ä—Ç–∏ (Prometheus rules + reload)
# =====================================================================
log "[8] –ë–ê–ó–û–í–ò –ê–õ–™–†–¢–ò: –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ rules –∏ –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ Prometheus..."
log "===================================================================="
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE8=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 8 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- 1) –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞ –ø—Ä–∞–≤–∏–ª–∞ ---
  sudo mkdir -p "$PROM_DIR/rules"

  # --- 2) –ë–∞–∑–æ–≤–∏ –ø—Ä–∞–≤–∏–ª–∞ (safe overwrite) ---
  sudo tee "$PROM_DIR/rules/base.rules.yml" >/dev/null <<'EOF'
groups:
  - name: basic-health
    rules:
      - alert: InstanceDown
        expr: up == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "Instance {{ $labels.instance }} –µ –Ω–µ–¥–æ—Å—Ç—ä–ø–µ–Ω"
          description: "–ü–æ–Ω–µ –µ–¥–Ω–∞ —Ü–µ–ª –Ω–µ –æ—Ç–≥–æ–≤–∞—Ä—è (job={{ $labels.job }}, instance={{ $labels.instance }})"

      - alert: NodeExporterMissing
        expr: absent(up{job="node"})
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "–õ–∏–ø—Å–≤–∞ node_exporter"
          description: "Prometheus –Ω–µ –Ω–∞–º–∏—Ä–∞ node_exporter –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —Å–∫—Ä–∞–ø–≤–∞–Ω–µ."

      - alert: HighCPULoad
        expr: (100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)) > 85
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "–í–∏—Å–æ–∫–æ CPU –Ω–∞—Ç–æ–≤–∞—Ä–≤–∞–Ω–µ –Ω–∞ {{ $labels.instance }}"
          description: "–°—Ä–µ–¥–Ω–æ—Ç–æ CPU –Ω–∞—Ç–æ–≤–∞—Ä–≤–∞–Ω–µ –µ >85% –ø—Ä–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 10 –º–∏–Ω—É—Ç–∏."

      - alert: LowDiskSpace
        expr: (node_filesystem_avail_bytes{fstype!~"tmpfs|devtmpfs"} / node_filesystem_size_bytes{fstype!~"tmpfs|devtmpfs"}) < 0.10
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "–ù–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –¥–∏—Å–∫–æ–≤–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–∞ {{ $labels.instance }}"
          description: "–°–≤–æ–±–æ–¥–Ω–æ—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –µ –ø–æ–¥ 10% (–∏–∑–∫–ª. tmpfs/devtmpfs)."
EOF

    # –ü—Ä–∞–≤–∏–º —Ñ–∞–π–ª–∞ —á–µ—Ç–∏–º (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–∞–Ω–æ)
  sudo chmod 0644 "$PROM_DIR/rules/base.rules.yml"

# --- 3) rule_files –≤ prometheus.yml (—Ç–≤—ä—Ä–¥–æ, –±–µ–∑ —É—Å–ª–æ–≤–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏) ---
  tmp_prom="/tmp/prom.$$"
  sudo cp -a "$PROM_DIR/prometheus.yml" "${PROM_DIR}/prometheus.yml.bak.$(date +%F-%H%M%S)"

  sudo awk '
    BEGIN{inrf=0; injected=0}
    {
      # –∞–∫–æ —Å–º–µ –≤—ä—Ç—Ä–µ –≤ —Å—Ç–∞—Ä rule_files –±–ª–æ–∫ ‚Äì –ø—Ä–µ—Å–∫–∞—á–∞–º–µ —Ä–µ–¥–æ–≤–µ—Ç–µ —Å "- ..."
      if (inrf==1) {
        if ($0 ~ /^\s*-\s*/) next;
        else inrf=0;
      }
      # –Ω–∞—á–∞–ª–æ –Ω–∞ rule_files –±–ª–æ–∫ ‚Äì –Ω–µ –≥–æ –ø–µ—á–∞—Ç–∞–º–µ (—â–µ –∏–Ω–∂–µ–∫—Ç–∏—Ä–∞–º–µ –Ω–∞—à)
      if ($0 ~ /^\s*rule_files\s*:/) { inrf=1; next }

      # –ø—Ä–µ–¥–∏ scrape_configs: –∏–Ω–∂–µ–∫—Ç–∏—Ä–∞–º–µ –∫–∞–Ω–æ–Ω–∏—á–Ω–∏—è –±–ª–æ–∫ (—Å–∞–º–æ –≤–µ–¥–Ω—ä–∂)
      if ($0 ~ /^\s*scrape_configs\s*:/ && injected==0) {
        print "rule_files:"
        print "  - /etc/prometheus/rules/*.yml"
        print ""
        injected=1
      }

      print
    }
    END{
      # –∞–∫–æ –ª–∏–ø—Å–≤–∞—à–µ scrape_configs:, –∏–Ω–∂–µ–∫—Ç–∏—Ä–∞–º–µ –≤ –∫—Ä–∞—è
      if(injected==0){
        print ""
        print "rule_files:"
        print "  - /etc/prometheus/rules/*.yml"
      }
    }
  ' "$PROM_DIR/prometheus.yml" > "$tmp_prom" && sudo mv "$tmp_prom" "$PROM_DIR/prometheus.yml"

  # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞—Ç–∞
  sudo docker run --rm \
    -v "$PROM_DIR/rules:/rules:ro" \
    --entrypoint /bin/promtool \
    prom/prometheus:latest \
    check rules /rules/*.yml \
    || { err "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ Prometheus rules –≤ $PROM_DIR/rules"; exit 1; }

  # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Å rule_files)
  sudo docker run --rm \
    -v "$PROM_DIR:/etc/prometheus:ro" \
    --entrypoint /bin/promtool \
    prom/prometheus:latest \
    check config /etc/prometheus/prometheus.yml \
    || { err "prometheus.yml –µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω —Å–ª–µ–¥ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ rule_files"; exit 1; }

  # --- 4) –ü—Ä–µ–∑–∞—Ä–µ–¥–∏ —Å–∞–º–æ Prometheus, –∑–∞ –¥–∞ –≤–∑–µ–º–µ –Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ ---
  if [[ -d "$COMPOSE_DIR" ]]; then
    (cd "$COMPOSE_DIR" && sudo docker compose up -d prometheus)
    ok "Prometheus –µ –ø—Ä–µ–∑–∞—Ä–µ–¥–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞—Ç–∞ –∑–∞ –∞–ª—ä—Ä—Ç–∏."
  else
    err "–õ–∏–ø—Å–≤–∞ COMPOSE_DIR ($COMPOSE_DIR) ‚Äì –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –ú–æ–¥—É–ª 5."
    exit 1
  fi

  resp="$(curl -fsS 'http://127.0.0.1:9090/api/v1/rules' || true)"
  echo "$resp" | grep -q '"basic-health"' \
    && ok "Rules loaded (group=basic-health)" \
    || warn "Rules not visible –≤ API (–ø—Ä–æ–≤–µ—Ä–∏ rule_files –∏ mounts)"

  # --- 5) –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç ---
  if sudo grep -q '^MON_RESULT_MODULE8=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE8=.*|MON_RESULT_MODULE8=‚úÖ|' "$SETUP_ENV_FILE"; then
      echo "MON_RESULT_MODULE8=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE8=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


exit 0
# =====================================================================
# [–ú–û–î–£–õ 9] Alertmanager ‚Üí Telegram –∏–∑–≤–µ—Å—Ç–∏—è (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–µ–Ω —Å –≤–∞–ª–∏–¥–∏—Ä–∞–Ω–µ)
# =====================================================================
log "[9] ALERTMANAGER: Telegram –∏–∑–≤–µ—Å—Ç–∏—è..."
log "======================================="
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE9=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 9 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else

# –ê–∫–æ –≤–µ—á–µ –∏–º–∞ telegram_configs –≤ alertmanager.yml ‚Üí –∏–∑–≤–ª–∏—á–∞–º–µ BOT_TOKEN/CHAT_ID –æ—Ç YAML (–±–µ–∑ –≤—ä–ø—Ä–æ—Å–∏)
if [[ -f "$ALERT_DIR/alertmanager.yml" ]] && sudo grep -q '^[[:space:]]*telegram_configs:' "$ALERT_DIR/alertmanager.yml" 2>/dev/null; then
  _Y="$ALERT_DIR/alertmanager.yml"
  _Y_DIR="$(dirname "$_Y")"

  BOT_TOKEN=""; CHAT_ID=""; BOT_TOKEN_FILE=""; _BT_SOURCE=""

  # helper: –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ
  _clean() {
    _v="${1%%#*}"; _v="${_v//$'\r'/}"; _v="${_v//\"/}"; _v="${_v//\'/}"
    _v="${_v#"${_v%%[![:space:]]*}"}"; _v="${_v%"${_v##*[![:space:]]}"}"
    printf "%s" "$_v"
  }

  # --- chat_id (inline) ---
  _raw_ci="$(sudo sed -nE "/^[[:space:]]*chat_id[[:space:]]*:/{
    s/^[[:space:]]*chat_id[[:space:]]*:[[:space:]]*//; p; q
  }" "$_Y" 2>/dev/null)"
  CHAT_ID="$(_clean "$_raw_ci")"

  # --- bot_token (inline) ---
  _raw_bt="$(sudo sed -nE "/^[[:space:]]*bot_token[[:space:]]*:/{
    s/^[[:space:]]*bot_token[[:space:]]*:[[:space:]]*//; p; q
  }" "$_Y" 2>/dev/null)"
  BOT_TOKEN="$(_clean "$_raw_bt")"
  [ -n "$BOT_TOKEN" ] && _BT_SOURCE="inline"

  # --- –∞–∫–æ –Ω—è–º–∞ inline: bot_token_file ---
  if [ -z "$BOT_TOKEN" ]; then
    _raw_file="$(sudo sed -nE "/^[[:space:]]*bot_token_file[[:space:]]*:/{
      s/^[[:space:]]*bot_token_file[[:space:]]*:[[:space:]]*//; p; q
    }" "$_Y" 2>/dev/null)"
    BOT_TOKEN_FILE="$(_clean "$_raw_file")"
    if [ -n "$BOT_TOKEN_FILE" ]; then
      [[ "$BOT_TOKEN_FILE" != /* ]] && BOT_TOKEN_FILE="$_Y_DIR/$BOT_TOKEN_FILE"
      if sudo test -r "$BOT_TOKEN_FILE"; then
        BOT_TOKEN="$(sudo head -c 4096 "$BOT_TOKEN_FILE" | tr -d '\r\n')"
        _BT_SOURCE="file"
      else
        _BT_SOURCE="file-unreadable"
      fi
    fi
  fi

  # --- —Ç–≤—ä—Ä–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞: chat_id –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω ---
  if [ -z "$CHAT_ID" ]; then
    err "–ù–∞–º–µ—Ä–∏—Ö telegram_configs, –Ω–æ –ª–∏–ø—Å–≤–∞ chat_id –≤ $_Y."
    exit 1
  fi

  ok "Alertmanager –≤–µ—á–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω –∑–∞ Telegram (chat_id –∑–∞—Ä–µ–¥–µ–Ω; bot_token: ${_BT_SOURCE:-none})."
else
    # --- 1) –ò–∑–∏—Å–∫–≤–∞–Ω–µ –∏ –≤–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–æ–∫–µ–Ω ---
    TELEGRAM_BOT_TOKEN=""
    while true; do
      echo ""
      read -r -p "–í—ä–≤–µ–¥–µ—Ç–µ TELEGRAM_BOT_TOKEN (–∏–ª–∏ 'q' –∑–∞ –æ—Ç–∫–∞–∑): " TELEGRAM_BOT_TOKEN || TELEGRAM_BOT_TOKEN=""
      [[ "$TELEGRAM_BOT_TOKEN" == "q" || "$TELEGRAM_BOT_TOKEN" == "Q" ]] && { warn "–û—Ç–∫–∞–∑–∞–Ω–æ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."; exit 0; }
      if [[ -z "$TELEGRAM_BOT_TOKEN" ]]; then
        echo "‚ùå –¢–æ–∫–µ–Ω—ä—Ç –µ –ø—Ä–∞–∑–µ–Ω. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ."
        continue
      fi
      okflag="$(curl -sS "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getMe" | jq -r '.ok' 2>/dev/null || echo "false")"
      [[ "$okflag" == "true" ]] && { ok "–¢–æ–∫–µ–Ω—ä—Ç –µ –≤–∞–ª–∏–¥–µ–Ω."; break; }
      echo "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–æ–∫–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤ @BotFather –∏ –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ."
    done

    # --- 2) –í—ä–≤–µ–∂–¥–∞–Ω–µ –∏ –≤–∞–ª–∏–¥–∏—Ä–∞–Ω–µ –Ω–∞ chat_id (—Å —Ç–µ—Å—Ç–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ) ---
    TELEGRAM_CHAT_ID=""
    while true; do
      echo "–°—ä–≤–µ—Ç: –∏–∑–ø—Ä–∞—Ç–µ—Ç–µ –µ–¥–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –Ω–∞ –±–æ—Ç–∞ (–ª–∏—á–µ–Ω —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–∞), –∑–∞ –¥–∞ –∏–º–∞ 'update'."
      read -r -p "–í—ä–≤–µ–¥–µ—Ç–µ TELEGRAM_CHAT_ID (–∏–ª–∏ 'q' –∑–∞ –æ—Ç–∫–∞–∑): " TELEGRAM_CHAT_ID || TELEGRAM_CHAT_ID=""
      [[ "$TELEGRAM_CHAT_ID" == "q" || "$TELEGRAM_CHAT_ID" == "Q" ]] && { warn "–û—Ç–∫–∞–∑–∞–Ω–æ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."; exit 0; }
      if [[ -z "$TELEGRAM_CHAT_ID" ]]; then
        echo "‚ùå CHAT_ID –µ –ø—Ä–∞–∑–µ–Ω. –û–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ."
        continue
      fi
      test_ok="$(curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
                 -d chat_id="${TELEGRAM_CHAT_ID}" \
                 -d text="‚úÖ MonHub —Ç–µ—Å—Ç–æ–≤–æ –∏–∑–≤–µ—Å—Ç–∏–µ" | jq -r '.ok' 2>/dev/null || echo "false")"
      [[ "$test_ok" == "true" ]] && { ok "–£—Å–ø–µ—à–Ω–æ –∏–∑–ø—Ä–∞—Ç–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ —Å—ä–æ–±—â–µ–Ω–∏–µ –∫—ä–º chat_id=${TELEGRAM_CHAT_ID}."; break; }
      echo "‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –∫—ä–º —Ç–æ–∑–∏ chat_id. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –¥–∞–ª–∏ –±–æ—Ç—ä—Ç –µ –≤ —á–∞—Ç–∞ (–∏ –Ω–µ –µ –±–ª–æ–∫–∏—Ä–∞–Ω) –∏ –æ–ø–∏—Ç–∞–π—Ç–µ –ø–∞–∫."
    done

    # --- 3) –ó–∞–ø–∏—Å –Ω–∞ alertmanager.yml —Å Telegram –ø–æ–ª—É—á–∞—Ç–µ–ª ---
    sudo mkdir -p "$ALERT_DIR"
    sudo tee "$ALERT_DIR/alertmanager.yml" >/dev/null <<EOF
route:
  receiver: 'telegram'
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 12h

receivers:
  - name: 'telegram'
    telegram_configs:
      - bot_token: '${TELEGRAM_BOT_TOKEN}'
        chat_id: '${TELEGRAM_CHAT_ID}'
        api_url: 'https://api.telegram.org'
        send_resolved: true
EOF
    sudo chown root:root "$ALERT_DIR/alertmanager.yml"
    sudo chmod 640 "$ALERT_DIR/alertmanager.yml"

    # --- 4) –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ —Å–∞–º–æ –Ω–∞ Alertmanager ---
    if [[ -d "$COMPOSE_DIR" ]]; then
      (cd "$COMPOSE_DIR" && sudo docker compose up -d alertmanager)
      ok "Alertmanager –µ –ø—Ä–µ–∑–∞—Ä–µ–¥–µ–Ω —Å Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è."
    else
      err "–õ–∏–ø—Å–≤–∞ COMPOSE_DIR ($COMPOSE_DIR) ‚Äì –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –ú–æ–¥—É–ª 5."
      exit 1
    fi
  fi

  # --- –ó–∞–ø–∏—Å –≤ todo.modules –∑–∞ —Å–ª–µ–¥–≤–∞—â–∏—Ç–µ –º–æ–¥—É–ª–∏ (–±–µ–∑ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –ø—Ä–∞–≤–∞/owner) ---
  if ! sudo test -f "$MODULES_FILE"; then
    echo "‚ùå –õ–∏–ø—Å–≤–∞ $MODULES_FILE (–∏–∑–ø—ä–ª–Ω–µ—Ç–µ –ú–æ–¥—É–ª 1 –ø—Ä–µ–¥–∏ –ú–æ–¥—É–ª 9)."
    exit 1
  fi
  if ! sudo sh -c "true >> '$MODULES_FILE'"; then
    echo "‚ùå –ù—è–º–∞–º –ø—Ä–∞–≤–∞ –∑–∞ –∑–∞–ø–∏—Å –≤ $MODULES_FILE (immutable/readonly)."
    exit 1
  fi

  # –•–∏–¥—Ä–∞—Ç–∏—Ä–∞–Ω–µ –Ω–∞ BOT_TOKEN/CHAT_ID –∑–∞ set -u
  # –ò–∑—Ç–æ—á–Ω–∏–∫ 1: monitoring.env; –ò–∑—Ç–æ—á–Ω–∏–∫ 2: todo.modules
  if sudo test -f "$MON_ENV_FILE"; then
    BOT_TOKEN="$(sudo awk -F= '/^[[:space:]]*BOT_TOKEN[[:space:]]*=/ {val=$0; sub(/^[^=]*=/,"",val); gsub(/\r/,"",val); gsub(/^[[:space:]]+|[[:space:]]+$/,"",val); print val; exit}' "$MON_ENV_FILE" 2>/dev/null)"
  fi
  [ -z "${BOT_TOKEN:-}" ] && BOT_TOKEN="$(sudo awk -F= '/^[[:space:]]*BOT_TOKEN[[:space:]]*=/ {val=$0; sub(/^[^=]*=/,"",val); gsub(/\r/,"",val); gsub(/^[[:space:]]+|[[:space:]]+$/,"",val); print val; exit}' "$MODULES_FILE" 2>/dev/null)"

  if sudo test -f "$MON_ENV_FILE"; then
    CHAT_ID="$(sudo awk -F= '/^[[:space:]]*CHAT_ID[[:space:]]*=/ {val=$0; sub(/^[^=]*=/,"",val); gsub(/\r/,"",val); gsub(/^[[:space:]]+|[[:space:]]+$/,"",val); print val; exit}' "$MON_ENV_FILE" 2>/dev/null)"
  fi
  [ -z "${CHAT_ID:-}" ] && CHAT_ID="$(sudo awk -F= '/^[[:space:]]*CHAT_ID[[:space:]]*=/ {val=$0; sub(/^[^=]*=/,"",val); gsub(/\r/,"",val); gsub(/^[[:space:]]+|[[:space:]]+$/,"",val); print val; exit}' "$MODULES_FILE" 2>/dev/null)"

  # –¢–≤—ä—Ä–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äì chat_id –µ –∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–µ–Ω, bot_token –º–æ–∂–µ –¥–∞ –ª–∏–ø—Å–≤–∞ (–∫–æ–≥–∞—Ç–æ –µ bot_token_file –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
  if [ -z "${CHAT_ID:-}" ]; then
    echo "‚ùå –õ–∏–ø—Å–≤–∞ CHAT_ID (–ú–æ–¥—É–ª 9 –Ω–µ –µ –∑–∞–≤—ä—Ä—à–µ–Ω)."
    exit 1
  fi

  # BOT_TOKEN (–∑–∞–ø–∏—Å–≤–∞–π —Å–∞–º–æ –∞–∫–æ –µ –Ω–∞–ª–∏—á–µ–Ω)
  if [ -n "${BOT_TOKEN:-}" ]; then
    if sudo grep -q '^BOT_TOKEN=' "$MODULES_FILE" 2>/dev/null; then
      sudo sed -i "s|^BOT_TOKEN=.*|BOT_TOKEN=${BOT_TOKEN}|" "$MODULES_FILE"
    else
      echo "BOT_TOKEN=${BOT_TOKEN}" | sudo tee -a "$MODULES_FILE" >/dev/null
    fi
  fi

  # CHAT_ID
  if sudo grep -q '^CHAT_ID=' "$MODULES_FILE" 2>/dev/null; then
    sudo sed -i "s|^CHAT_ID=.*|CHAT_ID=${CHAT_ID}|" "$MODULES_FILE"
  else
    echo "CHAT_ID=${CHAT_ID}" | sudo tee -a "$MODULES_FILE" >/dev/null
  fi

  # --- 5) –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç ---
  if sudo grep -q '^MON_RESULT_MODULE9=' "$SETUP_ENV_FILE" 2>/dev/null; then
    sudo sed -i 's|^MON_RESULT_MODULE9=.*|MON_RESULT_MODULE9=‚úÖ|' "$SETUP_ENV_FILE" && echo "MON_RESULT_MODULE9=‚úÖ"
  else
    echo "MON_RESULT_MODULE9=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi
fi

echo ""
echo ""


# ==========================================================
# [–ú–û–î–£–õ 10] –û–±–æ–±—â–µ–Ω–∏–µ ‚Äì Monitoring Stack + Telegram Alerts
# ==========================================================
log "[10] –û–ë–û–ë–©–ï–ù–ò–ï ‚Äì Monitoring Stack + Telegram Alerts"
log "===================================================="
log ""

NETGALAXY_DIR="${NETGALAXY_DIR:-/etc/netgalaxy}"
SETUP_ENV_FILE="${SETUP_ENV_FILE:-$NETGALAXY_DIR/setup.env}"
MON_ENV_FILE="${MON_ENV_FILE:-$NETGALAXY_DIR/monitoring.env}"

IP4="$(hostname -I | awk '{print $1}')"

GRAFANA_URL="http://${IP4}:3000"
PROM_URL="http://${IP4}:9090"
ALERT_URL="http://${IP4}:9093"
LOKI_URL="http://${IP4}:3100"
NODE_URL="http://${IP4}:9100/metrics"
BLACKBOX_PROBE="http://${IP4}:9115/probe?target=https://example.org"

# Telegram (—Å–∞–º–æ —á–µ—Ç–µ–Ω–µ –Ω–∞ CHAT_ID; –±–µ–∑ —Ç–æ–∫–µ–Ω)
CHAT_ID=""

# --- –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ CHAT_ID (–±–µ–∑ awk/pipe; —É—Å—Ç–æ–π—á–∏–≤–æ –Ω–∞ –ª–∏–ø—Å–≤–∞—â —Ñ–∞–π–ª)
[ -r "$MON_ENV_FILE" ] && . "$MON_ENV_FILE"
[ -z "${CHAT_ID:-}" ] && [ -r "$MODULES_FILE" ] && . "$MODULES_FILE"
CHAT_ID="${CHAT_ID%$'\r'}"

if [ -z "${CHAT_ID:-}" ]; then
  echo "‚ùå CHAT_ID –ª–∏–ø—Å–≤–∞. –ú–æ–¥—É–ª 9 (Telegram Alerts) –Ω–µ –µ –∑–∞–≤—ä—Ä—à–µ–Ω."
  exit 1
fi

# 2) Fallback –∫—ä–º todo.modules
[ -z "$CHAT_ID" ] && CHAT_ID="$(sudo awk -F= '/^[[:space:]]*CHAT_ID[[:space:]]*=/ {val=$0; sub(/^[^=]*=/,"",val); gsub(/\r/,"",val); gsub(/^[[:space:]]+|[[:space:]]+$/,"",val); print val; exit}' "$MODULES_FILE" 2>/dev/null)"

# 3) –¢–≤—ä—Ä–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
if [ -z "$CHAT_ID" ]; then
  echo "‚ùå CHAT_ID –ª–∏–ø—Å–≤–∞. –ú–æ–¥—É–ª 9 (Telegram Alerts) –Ω–µ –µ –∑–∞–≤—ä—Ä—à–µ–Ω."
  exit 1
fi

printf "\n"
printf "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ (–ª–∏–Ω–∫–æ–≤–µ –ø–æ IP –Ω–∞ —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä):\n"
printf "  ‚Ä¢ Grafana ........... %s  (default: admin / admin)\n" "$GRAFANA_URL"
printf "  ‚Ä¢ Prometheus ........ %s  (UI: /, /graph, /targets)\n" "$PROM_URL"
printf "  ‚Ä¢ Alertmanager ...... %s  (UI: /#/alerts, /#/silences)\n" "$ALERT_URL"
printf "  ‚Ä¢ Loki API .......... %s  (API; –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–∑ Grafana)\n" "$LOKI_URL"
printf "  ‚Ä¢ node_exporter ..... %s\n" "$NODE_URL"
printf "  ‚Ä¢ Blackbox probe .... %s\n" "$BLACKBOX_PROBE"

printf "\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:\n"
printf "  ‚Ä¢ –õ–æ–≥–æ–≤–µ ............ %s\n" "${LOG_DIR:-<–Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω–æ>}"
printf "  ‚Ä¢ Compose ........... %s\n" "${COMPOSE_DIR:-<–Ω–µ –µ –∑–∞–¥–∞–¥–µ–Ω–æ>}"

# –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ SSH –ø–æ—Ä—Ç–∞ (–æ—Ç sshd_config; –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ 22)
SSH_PORT="$(sudo awk '/^[[:space:]]*Port[[:space:]]+[0-9]+/ {print $2; exit}' /etc/ssh/sshd_config 2>/dev/null)"
SSH_PORT="${SSH_PORT:-22}"

# –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ CHAT_ID –±–µ–∑ awk/pipe; env ‚Üí fallback –∫—ä–º todo.modules
[ -r "$MON_ENV_FILE" ] && . "$MON_ENV_FILE"
[ -z "${CHAT_ID:-}" ] && [ -r "$MODULES_FILE" ] && . "$MODULES_FILE"
CHAT_ID="${CHAT_ID%$'\r'}"

if [ -z "${CHAT_ID:-}" ]; then
  echo "‚ùå CHAT_ID –ª–∏–ø—Å–≤–∞. –ú–æ–¥—É–ª 9 (Telegram Alerts) –Ω–µ –µ –∑–∞–≤—ä—Ä—à–µ–Ω."
  exit 1
fi

# --- Telegram: –∏–∑–≤–ª–∏—á–∞–Ω–µ –°–ê–ú–û –æ—Ç inline –∫–ª—é—á–æ–≤–µ –≤ alertmanager.yml ---
YAML="/opt/netgalaxy/monhub/alertmanager/alertmanager.yml"
sudo test -r "$YAML" || { echo "‚ùå –ù–µ–¥–æ—Å—Ç—ä–ø–µ–Ω —Ñ–∞–π–ª: $YAML"; exit 1; }

# BOT_TOKEN (inline —Ä–µ–¥: [-] bot_token: <—Å—Ç–æ–π–Ω–æ—Å—Ç>)
_line="$(sudo grep -m1 -E '^[[:space:]]*[-]?[[:space:]]*bot_token[[:space:]]*:' /opt/netgalaxy/monhub/alertmanager/alertmanager.yml 2>/dev/null || true)"
BOT_TOKEN="${_line#*:}"
BOT_TOKEN="${BOT_TOKEN%%#*}"
BOT_TOKEN="${BOT_TOKEN//$'\r'/}"
BOT_TOKEN="${BOT_TOKEN//\"/}"; BOT_TOKEN="${BOT_TOKEN//\'/}"
BOT_TOKEN="${BOT_TOKEN#"${BOT_TOKEN%%[![:space:]]*}"}"
BOT_TOKEN="${BOT_TOKEN%"${BOT_TOKEN##*[![:space:]]}"}"

# CHAT_ID (inline —Ä–µ–¥: [-] chat_id: <—Å—Ç–æ–π–Ω–æ—Å—Ç>)
_line="$(sudo grep -m1 -E '^[[:space:]]*[-]?[[:space:]]*chat_id[[:space:]]*:' /opt/netgalaxy/monhub/alertmanager/alertmanager.yml 2>/dev/null || true)"
CHAT_ID="${_line#*:}"
CHAT_ID="${CHAT_ID%%#*}"
CHAT_ID="${CHAT_ID//$'\r'/}"
CHAT_ID="${CHAT_ID//\"/}"; CHAT_ID="${CHAT_ID//\'/}"
CHAT_ID="${CHAT_ID#"${CHAT_ID%%[![:space:]]*}"}"
CHAT_ID="${CHAT_ID%"${CHAT_ID##*[![:space:]]}"}"

: "${BOT_TOKEN:?‚ùå BOT_TOKEN –ª–∏–ø—Å–≤–∞ –≤ /opt/netgalaxy/monhub/alertmanager/alertmanager.yml (–æ—á–∞–∫–≤–∞ —Å–µ —Ä–µ–¥: bot_token: <—Å—Ç–æ–π–Ω–æ—Å—Ç>)}"
: "${CHAT_ID:?‚ùå CHAT_ID –ª–∏–ø—Å–≤–∞ –≤ /opt/netgalaxy/monhub/alertmanager/alertmanager.yml (–æ—á–∞–∫–≤–∞ —Å–µ —Ä–µ–¥: chat_id: <—Å—Ç–æ–π–Ω–æ—Å—Ç>)}"

printf "\nTelegram Alerts:\n"
printf "  ‚Ä¢ –ë–æ—Ç ............... @netgalaxy_alerts_bot\n"
printf "  ‚Ä¢ CHAT_ID ........... %s\n" "$CHAT_ID"

printf "\n–ë—ä—Ä–∑ —Ç–µ—Å—Ç (–ø—Ä–µ–∑ –±—Ä–∞—É–∑—ä—Ä):\n"
printf "  https://api.telegram.org/bot%s/sendMessage?chat_id=%s&text=NetGalaxy%%20Monitoring%%20test\n" "$BOT_TOKEN" "$CHAT_ID"

# UFW/–ø–æ—Ä—Ç–æ–≤–µ (SSH –≤–∫–ª—é—á–µ–Ω —Å—Ä–µ–¥ –æ—Å—Ç–∞–Ω–∞–ª–∏—Ç–µ)
printf "\nUFW: –æ—Ç–≤–æ—Ä–µ–Ω–∏ –ø–æ—Ä—Ç–æ–≤–µ ‚Üí %s, 3000, 9090, 9093, 3100, 9100, 9115\n" "$SSH_PORT"

echo ""
echo ""

# --- –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ---
while true; do
  read -p "‚úÖ –ü—Ä–∏–µ–º–∞—Ç–µ –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–∞? (y/n): " confirm
  case "$confirm" in
    [Yy]*)
      # ‚úÖ –ó–∞–ø–∏—Å —Ñ–∏–Ω–∞–ª–µ–Ω —Å—Ç–∞—Ç—É—Å
      if grep -q '^SETUP_MONITORING_STATUS=' "$SETUP_ENV_FILE" 2>/dev/null; then
        sed -i 's|^SETUP_MONITORING_STATUS=.*|SETUP_MONITORING_STATUS=‚úÖ|' "$SETUP_ENV_FILE"
      else
        echo "SETUP_MONITORING_STATUS=‚úÖ" >> "$SETUP_ENV_FILE"
      fi
      echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –µ –ø—Ä–∏–µ—Ç–∞ –∏ –º–∞—Ä–∫–∏—Ä–∞–Ω–∞ –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω–∞."
      break
      ;;
    [Nn]*)
      echo "‚ùé –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ –ù–ï –µ –ø—Ä–∏–µ—Ç–∞. –°–∫—Ä–∏–ø—Ç—ä—Ç —â–µ —Å–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏ –±–µ–∑ —Ñ–∏–Ω–∞–ª–µ–Ω –∑–∞–ø–∏—Å."
      exit 0
      ;;
    *)
      echo "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –∏–∑–±–æ—Ä! –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ 'y' –∏–ª–∏ 'n'."
      ;;
  esac
done

# --- –ü–æ—á–∏—Å—Ç–≤–∞–Ω–µ ---
if [[ -f "$MODULES_FILE" ]]; then
  rm -f "$MODULES_FILE"
  echo "üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∏—è—Ç —Ñ–∞–π–ª todo.modules –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç."
fi

# --- –ó–ê–©–ò–¢–ê: –ù–ï –ò–ó–¢–†–ò–í–ê–ô /etc/netgalaxy –ò setup.env ---
# –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ –∫–æ–ø–∏–µ; —Ñ–∏–∫—Å–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∞–≤–∞ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–∏–∫.
sudo mkdir -p /etc/netgalaxy /var/backups/netgalaxy
sudo touch /etc/netgalaxy/.nodelete

# –†–µ–∑–µ—Ä–≤–Ω–æ –∫–æ–ø–∏–µ –Ω–∞ setup.env (—Å–∞–º–æ –∞–∫–æ –∏–º–∞ –ø—Ä–æ–º—è–Ω–∞)
if ! cmp -s /etc/netgalaxy/setup.env /var/backups/netgalaxy/setup.env 2>/dev/null; then
  sudo cp -a /etc/netgalaxy/setup.env /var/backups/netgalaxy/setup.env
fi

# ‚úÖ –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –∑–∞–±—Ä–∞–Ω–∞—Ç–∞ –∑–∞ –ø—Ä–æ–º—è–Ω–∞/–∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
if [[ -d "$NETGALAXY_DIR" ]]; then
  # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç –∏ –ø—Ä–∞–≤–∞
  sudo chown root:root "$NETGALAXY_DIR" 2>/dev/null || true
  sudo chmod 755 "$NETGALAXY_DIR"       2>/dev/null || true

  [[ -f "$SETUP_ENV_FILE"      ]] && { sudo chown root:root "$SETUP_ENV_FILE"      2>/dev/null || true; sudo chmod 644 "$SETUP_ENV_FILE"      2>/dev/null || true; }
  [[ -f "$MODULES_FILE"        ]] && { sudo chown root:root "$MODULES_FILE"        2>/dev/null || true; sudo chmod 644 "$MODULES_FILE"        2>/dev/null || true; }
  [[ -f "$NETGALAXY_DIR/.nodelete" ]] && { sudo chown root:root "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true; sudo chmod 644 "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true; }

  # –í—Ä—ä—â–∞–º–µ immutable —Ñ–ª–∞–≥–∞ (—Ñ–∞–π–ª–æ–≤–µ + –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
  [[ -f "$SETUP_ENV_FILE"      ]] && sudo chattr +i "$SETUP_ENV_FILE"       2>/dev/null || true
  [[ -f "$MODULES_FILE"        ]] && sudo chattr +i "$MODULES_FILE"         2>/dev/null || true
  [[ -f "$NETGALAXY_DIR/.nodelete" ]] && sudo chattr +i "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true
  sudo chattr +i "$NETGALAXY_DIR" 2>/dev/null || true
fi

# –í–ê–ñ–ù–û: –°–∫—Ä–∏–ø—Ç—ä—Ç –Ω–µ —Ç—Ä—è–±–≤–∞ –Ω–∏–∫–æ–≥–∞ –¥–∞ –∏–∑—Ç—Ä–∏–≤–∞ /etc/netgalaxy –∏–ª–∏ setup.env.
# –ò–∑—Ç—Ä–∏–≤–∞ —Å–µ —Å–∞–º–æ –∑–∞ todo.modules –∏ —Å–∞–º–∏—è —Å–∫—Ä–∏–ø—Ç.

if [[ -f "$0" ]]; then
  echo "üóëÔ∏è –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞..."
  rm -- "$0"
fi
echo ""
echo ""

# ------------ –ö—Ä–∞–π –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞ ------------
