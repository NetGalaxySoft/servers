#!/usr/bin/env bash

# ==========================================================================
#  vps-monitoring-qsetup ‚Äî –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–Ω–µ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ –∑–∞ MonHub
# --------------------------------------------------------------------------
#  –í–µ—Ä—Å–∏—è: 0.1-test
#  –î–∞—Ç–∞: 2025-08-10
#  –ê–≤—Ç–æ—Ä: NetGalaxySoft
# ==========================================================================
#
#  –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–ø–æ–ª–∞–≥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ (Prometheus, Grafana, Alertmanager,
#  Loki, Promtail, node_exporter, blackbox_exporter) –≤—ä—Ä—Ö—É MonHub.
#  –ò–∑–ø—ä–ª–Ω—è–≤–∞ —Å–µ –¥–∏—Ä–µ–∫—Ç–Ω–æ –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ (MonHub), –±–µ–∑ SSH –∫—ä–º –¥—Ä—É–≥–∏ –º–∞—à–∏–Ω–∏.
#
#  –ï—Ç–∞–ø–∏:
#    1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å—Ä–µ–¥–∞—Ç–∞ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ
#    2. –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ
#    3. –†–∞–∑–ø–æ–ª–∞–≥–∞–Ω–µ –Ω–∞ Docker Compose —Å—Ç–µ–∫–∞
#    4. –ü–æ–ª–∏—Ç–∏–∫–∞ –∑–∞ –¥–æ—Å—Ç—ä–ø (UI —Å–∞–º–æ –ø—Ä–µ–∑ SSH —Ç—É–Ω–µ–ª; data —Å–∞–º–æ –ø–æ VPN)
#    5. –ü—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç
# ==========================================================================

set -euo pipefail
set -o errtrace
trap 'echo "‚ùå –ì—Ä–µ—à–∫–∞ –Ω–∞ —Ä–µ–¥ $LINENO: ${BASH_COMMAND} (–∫–æ–¥ $?)" >&2' ERR

# === –ü–û–ú–û–©–ù–ê –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===================================================
show_help() {
  echo "–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: vps-monitoring-qsetup.sh [–æ–ø—Ü–∏—è]"
  echo ""
  echo "–†–∞–∑–ø–æ–ª–∞–≥–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ –∑–∞ MonHub (Prometheus, Grafana, Alertmanager,"
  echo "Loki, Promtail, node_exporter, blackbox_exporter) —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏—Ç–µ –Ω–∞ NetGalaxySoft."
  echo ""
  echo "–û–ø—Ü–∏–∏:"
  echo "  --version       –ü–æ–∫–∞–∑–≤–∞ –≤–µ—Ä—Å–∏—è—Ç–∞ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞"
  echo "  --help          –ü–æ–∫–∞–∑–≤–∞ —Ç–∞–∑–∏ –ø–æ–º–æ—â"
}

# === –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê –û–ü–¶–ò–ò ====================================================
if [[ $# -gt 0 ]]; then
  case "$1" in
    --version)
      echo "vps-monitoring-qsetup –≤–µ—Ä—Å–∏—è 0.1-test (10 –∞–≤–≥—É—Å—Ç 2025 –≥.)"
      exit 0
      ;;
    --help)
      show_help
      exit 0
      ;;
    *)
      echo "‚ùå –ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –æ–ø—Ü–∏—è: $1"
      show_help
      exit 1
      ;;
  esac
fi

# –ò–∑—á–∏—Å—Ç–≤–∞–Ω–µ –Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∑–∞ –ø–æ-—è—Å–µ–Ω —Å—Ç–∞—Ä—Ç
command -v clear >/dev/null && clear || printf "\033c"

# –ó–µ–ª–µ–Ω –±–∞–Ω–µ—Ä –∑–∞ –∑–∞–≥–ª–∞–≤–∏–µ
echo -e "\033[92m====================================================================="
echo    "vps-monhub-qsetup.sh ‚Äî –¶–µ–Ω—Ç—Ä–∞–ª–µ–Ω —Å—ä—Ä–≤—ä—Ä –∑–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ –ª–æ–≥–æ–≤–µ"
echo    "–í–µ—Ä—Å–∏—è: 1.0 (Ubuntu 24.04 amd64)"
echo    "–õ–∏—Ü–µ–Ω–∑: NetGalaxySoft internal"
echo -e "=====================================================================\033[0m"
echo ""
echo ""

NETGALAXY_DIR="/etc/netgalaxy"
MODULES_FILE="$NETGALAXY_DIR/todo.modules"
SETUP_ENV_FILE="$NETGALAXY_DIR/setup.env"

COMPOSE_DIR="/opt/netgalaxy/monhub"
PROM_DIR="$COMPOSE_DIR/prometheus"
ALERT_DIR="$COMPOSE_DIR/alertmanager"
LOKI_DIR="$COMPOSE_DIR/loki"
GRAFANA_DIR="$COMPOSE_DIR/grafana"

# --- –ú–∏–Ω–∏–º–∞–ª–Ω–∏ —Å—ä–æ–±—â–µ–Ω–∏—è (—Å—Ç–∞–±–∏–ª–µ–Ω shim) ---
log()  { echo -e "$*"; }
ok()   { echo -e "‚úÖ $*"; }
warn() { echo -e "‚ö†Ô∏è  $*"; }
err()  { echo -e "‚ùå $*" >&2; }


# =====================================================================
# [–ú–û–î–£–õ 1] –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–ù–ò –ü–†–û–í–ï–†–ö–ò –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# =====================================================================
log "[1] –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–ù–ò –ü–†–û–í–ï–†–ö–ò –ù–ê –°–ò–°–¢–ï–ú–ê..."
log "-----------------------------------------------------------"
log ""

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ root –ø—Ä–∞–≤–∞
if [[ $EUID -ne 0 ]]; then
  echo "‚ùå –¢—Ä—è–±–≤–∞ –¥–∞ —Å—Ç–∞—Ä—Ç–∏—Ä–∞—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å root –ø—Ä–∞–≤–∞ (sudo)."
  exit 1
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –±–∞–∑–æ–≤–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
if [[ ! -f "$SETUP_ENV_FILE" ]] || ! sudo grep -q '^SETUP_VPS_BASE_STATUS=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "üõë –°—ä—Ä–≤—ä—Ä—ä—Ç –µ —Å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–∞—á–∞–ª–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è. –ú–æ–ª—è, —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ —Ñ–∞–π–ª–∞ vps-base-qsetup.sh –∏ –æ–ø–∏—Ç–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ."
  echo "üóëÔ∏è –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∞."
  [[ -f "$0" ]] && rm -- "$0"
  exit 1
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ —Å–∫—Ä–∏–ø—Ç—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
if [[ -f "$SETUP_ENV_FILE" ]] && sudo grep -q '^SETUP_VPS_MONITORING_STATUS=‚úÖ' "$SETUP_ENV_FILE"; then
  echo "üõë –¢–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç –≤–µ—á–µ –µ –±–∏–ª –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞ —Ç–æ–∑–∏ —Å—ä—Ä–≤—ä—Ä."
  echo "–ü–æ–≤—Ç–æ—Ä–Ω–æ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ –Ω–µ –µ –ø–æ–∑–≤–æ–ª–µ–Ω–æ, –∑–∞ –¥–∞ —Å–µ –∏–∑–±–µ–≥–Ω–µ –ø–æ–≤—Ä–µ–¥–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–∞—Ç–∞."
  [[ -f "$0" ]] && sudo rm -- "$0"
  exit 0
fi

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞..."
if [[ -f /etc/os-release ]]; then
  source /etc/os-release
  OS_NAME=$ID
  OS_VERSION=$VERSION_ID
else
  echo "‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –û–°. –°–∫—Ä–∏–ø—Ç—ä—Ç –∏–∑–∏—Å–∫–≤–∞ Ubuntu –∏–ª–∏ Debian."
  exit 1
fi

SUPPORTED=false
if [[ "$OS_NAME" == "ubuntu" && ( "$OS_VERSION" == "22.04" || "$OS_VERSION" == "24.04" ) ]]; then
  SUPPORTED=true
elif [[ "$OS_NAME" == "debian" && ( "$OS_VERSION" == "11" || "$OS_VERSION" == "12" ) ]]; then
  SUPPORTED=true
fi

if [[ "$SUPPORTED" == false ]]; then
  echo "‚ùå –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ $PRETTY_NAME –Ω–µ —Å–µ –ø–æ–¥–¥—ä—Ä–∂–∞ –æ—Ç —Ç–æ–∑–∏ —Å–∫—Ä–∏–ø—Ç."
  echo "–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–∏ —Å–∏—Å—Ç–µ–º–∏: Ubuntu 22.04/24.04, Debian 11/12"
  exit 1
fi

echo "‚úÖ –ó–∞—Å–µ—á–µ–Ω–∞ –ø–æ–¥–¥—ä—Ä–∂–∞–Ω–∞ –û–°: $PRETTY_NAME"
echo ""

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE1=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 1 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
else
  # ‚úÖ –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ IP –∞–¥—Ä–µ—Å
  while true; do
    printf "üåê –í—ä–≤–µ–¥–µ—Ç–µ –ø—É–±–ª–∏—á–Ω–∏—è IP –∞–¥—Ä–µ—Å –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ (–∏–ª–∏ 'q' –∑–∞ –∏–∑—Ö–æ–¥): "
    read SERVER_IP

    if [[ "$SERVER_IP" == "q" || "$SERVER_IP" == "Q" ]]; then
      echo "‚ùé –°–∫—Ä–∏–ø—Ç—ä—Ç –±–µ—à–µ –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
      exit 0
    fi

    if ! [[ "$SERVER_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      echo "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω IP –∞–¥—Ä–µ—Å. –ú–æ–ª—è, –≤—ä–≤–µ–¥–µ—Ç–µ –≤–∞–ª–∏–¥–µ–Ω IPv4 –∞–¥—Ä–µ—Å (–ø—Ä–∏–º–µ—Ä: 192.168.1.100)."
      continue
    fi

    ACTUAL_IP=$(curl -s -4 ifconfig.me)

    if [[ "$ACTUAL_IP" != "$SERVER_IP" ]]; then
      echo ""
      echo "üö´ –ù–µ—Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ! –í—ä–≤–µ–¥–µ–Ω–∏—è—Ç IP ($SERVER_IP) –Ω–µ —Å—ä–≤–ø–∞–¥–∞ —Å —Ä–µ–∞–ª–Ω–∏—è IP –Ω–∞ –º–∞—à–∏–Ω–∞—Ç–∞ ($ACTUAL_IP)."
      echo ""
      read -p "üîÅ –ò—Å–∫–∞—Ç–µ –ª–∏ –¥–∞ –æ–ø–∏—Ç–∞—Ç–µ –æ—Ç–Ω–æ–≤–æ? [Enter –∑–∞ –î–ê, 'q' –∑–∞ –∏–∑—Ö–æ–¥]: " retry
      if [[ "$retry" == "q" || "$retry" == "Q" ]]; then
        echo "‚õî –°–∫—Ä–∏–ø—Ç—ä—Ç –±–µ—à–µ –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
        exit 0
      fi
      echo ""
    else
      echo "‚úÖ –ü–æ—Ç–≤—ä—Ä–¥–µ–Ω–æ: —Å–∫—Ä–∏–ø—Ç—ä—Ç –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω –Ω–∞ —Å—ä—Ä–≤—ä—Ä–∞ —Å IP $SERVER_IP."
      echo ""
      break
    fi
  done

  # ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∑–∞–±—Ä–∞–Ω–∞—Ç–∞ –∑–∞ –ø—Ä–æ–º—è–Ω–∞/–∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
  if [[ -d "$NETGALAXY_DIR" ]]; then
    # 0) –°–≤–∞–ª—è–º–µ immutable —Ñ–ª–∞–≥–∞ –∏ –∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞
    sudo chattr -i "$NETGALAXY_DIR" 2>/dev/null || true

    # 1) –ü—ä—Ä–≤–æ —Å–≤–∞–ª—è–º–µ immutable —Ñ–ª–∞–≥–∞ (–∞–∫–æ –µ –∑–∞–¥–∞–¥–µ–Ω)
    [[ -f "$SETUP_ENV_FILE"      ]] && sudo chattr -i "$SETUP_ENV_FILE"       2>/dev/null || true
    [[ -f "$MODULES_FILE"        ]] && sudo chattr -i "$MODULES_FILE"         2>/dev/null || true
    [[ -f "$NETGALAXY_DIR/.nodelete" ]] && sudo chattr -i "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true

    # 2) –ü–æ—Å–ª–µ –∫–æ—Ä–∏–≥–∏—Ä–∞–º–µ —Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç –∏ –ø—Ä–∞–≤–∞ –ø–æ–æ—Ç–¥–µ–ª–Ω–æ (—Å–∞–º–æ –∞–∫–æ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—Ç)
    sudo chown root:root "$NETGALAXY_DIR" 2>/dev/null || true
    sudo chmod 755 "$NETGALAXY_DIR"       2>/dev/null || true

    [[ -f "$SETUP_ENV_FILE"      ]] && { sudo chown root:root "$SETUP_ENV_FILE"      2>/dev/null || true; sudo chmod 644 "$SETUP_ENV_FILE"      2>/dev/null || true; }
    [[ -f "$MODULES_FILE"        ]] && { sudo chown root:root "$MODULES_FILE"        2>/dev/null || true; sudo chmod 644 "$MODULES_FILE"        2>/dev/null || true; }
    [[ -f "$NETGALAXY_DIR/.nodelete" ]] && { sudo chown root:root "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true; sudo chmod 644 "$NETGALAXY_DIR/.nodelete" 2>/dev/null || true; }
  fi

  # ‚úÖ –ó–∞–ø–∏—Å –∏–ª–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ SERVER_IP –≤ todo.modules
  if sudo grep -q '^SERVER_IP=' "$MODULES_FILE" 2>/dev/null; then
    sudo sed -i "s|^SERVER_IP=.*|SERVER_IP=\"$SERVER_IP\"|" "$MODULES_FILE"
  else
    echo "SERVER_IP=\"$SERVER_IP\"" | sudo tee -a "$MODULES_FILE" > /dev/null
  fi

echo ""

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ –ú–æ–¥—É–ª 1
  if sudo grep -q '^MON_RESULT_MODULE1=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE1=.*|MON_RESULT_MODULE1=‚úÖ|' "$SETUP_ENV_FILE"; then
        echo "MON_RESULT_MODULE1=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE1=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# ===================================================================
# [–ú–û–î–£–õ 2] –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–ò (FQDN/IP, —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
# ===================================================================
log "[2] –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –í–ê–õ–ò–î–ê–¶–ò–ò (FQDN/IP, —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)"
log "-------------------------------------------------------------------------"
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE2=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 2 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- 2.1 FQDN: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ (—Å –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç –∑–∞ override –ø—Ä–µ–∑ DOMAIN_EXPECTED) -----
  FQDN_CANDIDATE=""
  if [[ -n "${DOMAIN_EXPECTED:-}" ]]; then
    FQDN_CANDIDATE="$DOMAIN_EXPECTED"
    echo "‚ÑπÔ∏è DOMAIN_EXPECTED –µ –ø–æ–¥–∞–¥–µ–Ω: $FQDN_CANDIDATE"
  else
    # –û–ø–∏—Ç 1: hostname --fqdn; –û–ø–∏—Ç 2: hostname -f; –û–ø–∏—Ç 3: hostname
    FQDN_CANDIDATE="$(hostname --fqdn 2>/dev/null || hostname -f 2>/dev/null || hostname 2>/dev/null || true)"
    FQDN_CANDIDATE="$(printf '%s' "$FQDN_CANDIDATE" | tr -d '[:space:]')"
  fi

  FQDN_REGEX='^([a-zA-Z0-9][-a-zA-Z0-9]*\.)+[a-zA-Z]{2,}$'
  if [[ -n "$FQDN_CANDIDATE" && "$FQDN_CANDIDATE" =~ $FQDN_REGEX ]]; then
    FQDN="$FQDN_CANDIDATE"
    echo "‚úÖ –ó–∞—Å–µ—á–µ–Ω FQDN: $FQDN"
  else
    echo "‚ö†Ô∏è  –ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –≤–∞–ª–∏–¥–µ–Ω FQDN –æ—Ç —Å–∏—Å—Ç–µ–º–∞—Ç–∞."
    FQDN=""
  fi

  # --- 2.2 IP –≤–∞–ª–∏–¥–∏—Ä–∞—Ü–∏–∏ (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏, –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è) -----------------------------------
  ACTUAL_IP="$(curl -s -4 ifconfig.me || true)"
  [[ -n "$ACTUAL_IP" ]] && echo "‚ÑπÔ∏è  –ó–∞—Å–µ—á–µ–Ω –ø—É–±–ª–∏—á–µ–Ω IP –∞–¥—Ä–µ—Å: $ACTUAL_IP"

  if [[ -n "$FQDN" ]]; then
    FQDN_IPS="$(dig +short "$FQDN" A 2>/dev/null | tr '\n' ' ' | sed 's/ *$//')"
    if [[ -n "$FQDN_IPS" ]]; then
      echo "‚ÑπÔ∏è  DNS A –∑–∞–ø–∏—Å–∏ –∑–∞ $FQDN: $FQDN_IPS"
      if [[ -n "$ACTUAL_IP" ]] && grep -qw "$ACTUAL_IP" <<< "$FQDN_IPS"; then
        echo "‚úÖ $FQDN —Ä–µ–∑–æ–ª–≤–∏—Ä–∞ –∫—ä–º –ø—É–±–ª–∏—á–Ω–∏—è IP –Ω–∞ –º–∞—à–∏–Ω–∞—Ç–∞."
      else
        echo "‚ö†Ô∏è  –ù–µ—Å—ä–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –ª–∏–ø—Å–∞ –Ω–∞ –ø—É–±–ª–∏—á–µ–Ω IP ‚Üî DNS A –∑–∞–ø–∏—Å–∏—Ç–µ."
      fi
    else
      echo "‚ö†Ô∏è  $FQDN –Ω–µ —Ä–µ–∑–æ–ª–≤–∏—Ä–∞ –∫—ä–º A –∑–∞–ø–∏—Å –≤ –º–æ–º–µ–Ω—Ç–∞."
    fi
  fi

  # --- 2.3 –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ -----------------
COMPOSE_DIR="/opt/netgalaxy/monhub"
PROM_DIR="$COMPOSE_DIR/prometheus"
ALERT_DIR="$COMPOSE_DIR/alertmanager"
LOKI_DIR="$COMPOSE_DIR/loki"
GRAFANA_DIR="$COMPOSE_DIR/grafana"
LOG_DIR="/var/log/netgalaxy"

echo "üìÅ –°—ä–∑–¥–∞–≤–∞–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
sudo mkdir -p "$COMPOSE_DIR" || exit 1
sudo mkdir -p "$PROM_DIR" || exit 1
sudo mkdir -p "$ALERT_DIR" || exit 1
sudo mkdir -p "$LOKI_DIR" || exit 1
sudo mkdir -p "$GRAFANA_DIR" || exit 1
sudo mkdir -p "$LOG_DIR" || exit 1
echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏—Ç–µ —Å–∞ —Å—ä–∑–¥–∞–¥–µ–Ω–∏."

echo "üîß –ù–∞—Å—Ç—Ä–æ–π–≤–∞–º –ø—Ä–∞–≤–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç..."
sudo chown -R root:root "$COMPOSE_DIR" "$LOG_DIR"
sudo chmod 755 "$COMPOSE_DIR" "$LOG_DIR"
sudo find "$COMPOSE_DIR" -type d -exec chmod 755 {} \;
echo "‚úÖ –ü—Ä–∞–≤–∞/—Å–æ–±—Å—Ç–≤–µ–Ω–æ—Å—Ç —Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏."

  # ‚úÖ –ó–∞–ø–∏—Å –∏–ª–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ FQDN –≤ todo.modules (–∞–∫–æ –∏–º–∞–º–µ –≤–∞–ª–∏–¥–µ–Ω FQDN)
  if [[ -n "$FQDN" ]]; then
    if sudo grep -q '^FQDN=' "$MODULES_FILE" 2>/dev/null; then
      sudo sed -i "s|^FQDN=.*|FQDN=\"$FQDN\"|" "$MODULES_FILE"
    else
      echo "FQDN=\"$FQDN\"" | sudo tee -a "$MODULES_FILE" > /dev/null
    fi
  else
    echo "‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–º –∑–∞–ø–∏—Å –Ω–∞ FQDN –≤ $MODULES_FILE (–ª–∏–ø—Å–≤–∞ –≤–∞–ª–∏–¥–µ–Ω FQDN)."
  fi

echo ""

  # ‚úÖ –ó–∞–ø–∏—Å–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –º–æ–¥—É–ª–∞ (–∫–æ—Ä–µ–∫—Ç–Ω–∏—è—Ç –∫–ª—é—á –∑–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)
  if sudo grep -q '^MON_RESULT_MODULE2=' "$SETUP_ENV_FILE" 2>/dev/null; then
    sudo sed -i 's|^MON_RESULT_MODULE2=.*|MON_RESULT_MODULE2=‚úÖ|' "$SETUP_ENV_FILE"
    echo "MON_RESULT_MODULE2=‚úÖ"
  else
    echo "MON_RESULT_MODULE2=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi
fi
echo ""
echo ""


# =====================================================================
# [–ú–û–î–£–õ 3] –°–∏—Å—Ç–µ–º–Ω–∏ —ä–ø–¥–µ–π—Ç–∏, SSH (–±–µ–∑ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ root/–ø–∞—Ä–æ–ª–∏), UFW
# =====================================================================
log "[3] –°–ò–°–¢–ï–ú–ù–ò –ù–ê–°–¢–†–û–ô–ö–ò: —ä–ø–¥–µ–π—Ç–∏, SSH, UFW..."
log "=============================================="
log ""

if sudo grep -q '^MON_RESULT_MODULE3=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 3 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- –™–ø–¥–µ–π—Ç–∏ (noninteractive) ---
  sudo apt-get update -y
  sudo DEBIAN_FRONTEND=noninteractive apt-get dist-upgrade -y

  # --- –ú–∏–Ω–∏–º–∞–ª–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ ---
  sudo apt-get install -y curl wget gnupg2 ca-certificates jq unzip software-properties-common ufw

  # --- –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∞–ª–Ω–∏—Ç–µ SSH –ø–æ—Ä—Ç–æ–≤–µ ---
  SSHD="/etc/ssh/sshd_config"
  SSHD_BIN="$(command -v sshd || echo /usr/sbin/sshd)"

  # 1) —Å–ª—É—à–∞—â–∏ –ø–æ—Ä—Ç–æ–≤–µ –Ω–∞ sshd (live)
  mapfile -t SSH_PORTS < <(ss -ltnp 2>/dev/null | awk '/sshd/ {split($4,a,":"); print a[length(a)]}' | sort -u)

  # 2) fallback: –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ (–≤–∫–ª. –≤–∫–ª—é—á–µ–Ω–∏ *.conf)
  if [[ ${#SSH_PORTS[@]} -eq 0 ]]; then
    mapfile -t SSH_PORTS < <(
      { awk '/^\s*Port\s+[0-9]+/ {print $2}' "$SSHD" 2>/dev/null; \
        awk '/^\s*Port\s+[0-9]+/ {print $2}' /etc/ssh/sshd_config.d/*.conf 2>/dev/null; } \
      | awk 'NF' | sort -u
    )
  fi

  # 3) —Ñ–∏–Ω–∞–ª–µ–Ω fallback
  [[ ${#SSH_PORTS[@]} -eq 0 ]] && SSH_PORTS=(22)

  # --- SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–±–µ–∑ –¥–∞ –∑–∞–±—Ä–∞–Ω—è–≤–∞–º–µ root/–ø–∞—Ä–æ–ª–∏ –Ω–∞ —Ç–æ–∑–∏ –µ—Ç–∞–ø) ---
  sudo cp -a "$SSHD" "${SSHD}.bak.$(date +%F-%H%M%S)" 2>/dev/null || true
  sudo sed -i 's/^#\?X1\?1Forwarding .*/X11Forwarding no/' "$SSHD" 2>/dev/null || true

  # –¢–µ—Å—Ç –∏ –±–µ–∑–æ–ø–∞—Å–µ–Ω reload (–Ω–∏–∫–æ–≥–∞ restart)
  if sudo "$SSHD_BIN" -t; then
    sudo systemctl reload ssh || sudo systemctl reload sshd || true
  else
    warn "–ù–µ–≤–∞–ª–∏–¥–µ–Ω sshd_config. –í—Ä—ä—â–∞–º backup."
    sudo cp -a "${SSHD}.bak."* "$SSHD" 2>/dev/null || true
  fi

  # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞ UFW –ø—Ä–∞–≤–∏–ª–∞—Ç–∞ (–ø—Ä–µ–≥–ª–µ–¥ –ø—Ä–µ–¥–∏ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ) ---
  # –°–ø–∏—Å—ä–∫ —Å –ø–æ—Ä—Ç–æ–≤–µ, –∫–æ–∏—Ç–æ —â–µ –±—ä–¥–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏ (TCP)
  ALLOW_PORTS=( "${SSH_PORTS[@]}" 22 3000 9090 9093 3100 9100 9115 )

  # –ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –¥—É–±–ª–∏—Ä–∞–Ω–∏/–ø—Ä–∞–∑–Ω–∏ —Å—Ç–æ–π–Ω–æ—Å—Ç–∏
  declare -A _seen
  UNIQUE_PORTS=()

  for p in "${ALLOW_PORTS[@]}"; do
    [[ -n "$p" ]] || continue
    if [[ -z "${_seen["$p"]+x}" ]]; then
      UNIQUE_PORTS+=("$p")
      _seen["$p"]=1
    fi
  done

  echo ""
  echo "üõ°Ô∏è  –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª–µ–Ω –ø—Ä–µ–≥–ª–µ–¥ –Ω–∞ UFW –ø—Ä–∞–≤–∏–ª–∞—Ç–∞:"
  echo "    –ü–æ–ª–∏—Ç–∏–∫–∏: incoming=DENY, outgoing=ALLOW"
  echo "    –©–µ –±—ä–¥–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏ —Å–ª–µ–¥–Ω–∏—Ç–µ –≤—Ö–æ–¥—è—â–∏ TCP –ø–æ—Ä—Ç–æ–≤–µ:"
  for p in "${UNIQUE_PORTS[@]}"; do
    echo "      ‚Ä¢ allow ${p}/tcp"
  done
  echo ""
  
  # --- –ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ UFW ---
  _ans=""
  while true; do
    echo "‚ñ∂ –ü—Ä–∏–ª–∞–≥–∞–Ω–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ UFW? [Enter=–î–ê/y/yes/–¥/–¥–∞]"
    read -r -p "–∏–ª–∏ [n/no/–Ω–µ/q –∑–∞ –û–¢–ö–ê–ó]: " _ans || _ans=""
    _ans_lc="$(printf '%s' "${_ans}" | tr '[:upper:]' '[:lower:]')"

    case "$_ans_lc" in
      ""|"y"|"yes"|"–¥"|"–¥–∞")
        # –ø—Ä–æ–¥—ä–ª–∂–∞–≤–∞–º–µ
        break
        ;;
      "n"|"no"|"–Ω–µ"|"q")
        warn "–ü—Ä–µ–∫—Ä–∞—Ç—è–≤–∞–Ω–µ –Ω–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ—Ç–æ –ø—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–µ –Ω–∞ UFW."
        echo ""
        exit 0
        ;;
      *)
        echo "‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä. –ù–∞—Ç–∏—Å–Ω–µ—Ç–µ Enter (–î–ê) –∏–ª–∏ –≤—ä–≤–µ–¥–µ—Ç–µ n/no/–Ω–µ/q (–û–¢–ö–ê–ó)."
        ;;
    esac
  done

  # --- UFW –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ ---
  sudo ufw --force reset
  sudo ufw default deny incoming
  sudo ufw default allow outgoing
  for p in "${UNIQUE_PORTS[@]}"; do
    sudo ufw allow "${p}/tcp"
  done
  sudo ufw --force enable

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç
  if sudo grep -q '^MON_RESULT_MODULE3=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE3=.*|MON_RESULT_MODULE3=‚úÖ|' "$SETUP_ENV_FILE"; then
      echo "MON_RESULT_MODULE3=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE3=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi
  
fi
echo ""
echo ""


# ======================================================
# [–ú–û–î–£–õ 4] –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è –Ω–∞ Docker Engine + Compose (LTS)
# ======================================================
log "[4] DOCKER ENGINE + COMPOSE..."
log "==================================================="
log ""

# --- –ó–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–∞ –Ω–∞—á–∞–ª–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –≤–µ—á–µ –∏–∑–ø—ä–ª–Ω–µ–Ω –º–æ–¥—É–ª -----------------
if sudo grep -q '^MON_RESULT_MODULE4=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 4 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  MODULE_MARK="M4.docker"
  RESULT_KEY="MON_RESULT_MODULE4"

  # –û—Ñ–∏—Ü–∏–∞–ª–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ Docker
  sudo apt-get update -y
  sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

  # –ö–ª—é—á–æ–¥—ä—Ä–∂–∞—Ç–µ–ª –∑–∞ Docker (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
  sudo install -m 0755 -d /etc/apt/keyrings
  if [[ ! -f /etc/apt/keyrings/docker.gpg ]]; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
      | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    sudo chmod 0644 /etc/apt/keyrings/docker.gpg
  fi

  # –†–µ–ø–æ —Ñ–∞–π–ª (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)
  UBUNTU_CODENAME="$(. /etc/os-release && echo "$UBUNTU_CODENAME")"
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu ${UBUNTU_CODENAME} stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

  # –†–∞–∑—Ä–µ—à–∞–≤–∞–º–µ –∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ Docker service
  sudo systemctl enable --now docker

  # ‚úÖ –ó–∞–ø–∏—Å –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç –∑–∞ –ú–æ–¥—É–ª 4 + –ø–æ–∫–∞–∑–≤–∞–Ω–µ –°–ê–ú–û –ø—Ä–∏ —É—Å–ø–µ—à–µ–Ω –∑–∞–ø–∏—Å
  if sudo grep -q "^${RESULT_KEY}=" "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i "s|^${RESULT_KEY}=.*|${RESULT_KEY}=‚úÖ|" "$SETUP_ENV_FILE"; then
      echo "${RESULT_KEY}=‚úÖ"
    fi
  else
    echo "${RESULT_KEY}=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# =====================================================================
# [–ú–û–î–£–õ 5] –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫ (Prometheus, Alertmanager, Blackbox, Loki, Promtail, Grafana)
# =====================================================================
log "[5] –ú–û–ù–¢–û–†–ò–ù–ì –°–¢–ï–ö: Prometheus, Alertmanager, Blackbox, Loki, Promtail, Grafana..."
log "===================================================================================="
log ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ –º–æ–¥—É–ª—ä—Ç –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω
if sudo grep -q '^MON_RESULT_MODULE5=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 5 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- 1) –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ .env ---
  sudo mkdir -p "$PROM_DIR" "$ALERT_DIR" "$LOKI_DIR/data" "$GRAFANA_DIR/provisioning/datasources" "$COMPOSE_DIR/blackbox" "$GRAFANA_DIR/data"

  # .env –∑–∞ docker compose (–ø—ä—Ç–∏—â–∞ –∏ –±–∞–∑–æ–≤–∏ –∫—Ä–µ–¥–µ–Ω—à—ä–ª–∏)
  sudo tee "$COMPOSE_DIR/.env" >/dev/null <<EOF
PROM_DIR=$PROM_DIR
ALERT_DIR=$ALERT_DIR
LOKI_DIR=$LOKI_DIR
GRAFANA_DIR=$GRAFANA_DIR

# –ë–∞–∑–æ–≤–∏ Grafana –∫—Ä–µ–¥–µ–Ω—à—ä–ª–∏ (—Å–º–µ–Ω–µ—Ç–µ –ø–æ-–∫—ä—Å–Ω–æ —á—Ä–µ–∑ security —Å–∫—Ä–∏–ø—Ç–∞)
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin
EOF

  # --- 2) –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---

  # Prometheus (targets: –ª–æ–∫–∞–ª–µ–Ω node_exporter, blackbox, —Å–∞–º–∏—è prometheus, alertmanager)
  sudo tee "$PROM_DIR/prometheus.yml" >/dev/null <<'EOF'
global:
  scrape_interval: 15s
  evaluation_interval: 15s

alerting:
  alertmanagers:
    - static_configs:
        - targets: ['alertmanager:9093']

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['prometheus:9090']

  - job_name: 'node'
    static_configs:
      - targets: ['localhost:9100']

  - job_name: 'blackbox_http'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      - targets:
          - https://example.org
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox:9115
EOF

  # Alertmanager (–º–∏–Ω–∏–º–∞–ª–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äì –±–µ–∑ —Ä–µ–∞–ª–Ω–∏ –º–∞—Ä—à—Ä—É—Ç–∏)
  sudo tee "$ALERT_DIR/alertmanager.yml" >/dev/null <<'EOF'
route:
  receiver: 'null'
receivers:
  - name: 'null'
EOF

  # Blackbox Exporter
  sudo tee "$COMPOSE_DIR/blackbox/blackbox.yml" >/dev/null <<'EOF'
modules:
  http_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2"]
      preferred_ip_protocol: "ip4"
  icmp:
    prober: icmp
    timeout: 5s
EOF

  # Loki
  sudo tee "$LOKI_DIR/config.yml" >/dev/null <<'EOF'
server:
  http_listen_port: 3100
  grpc_listen_port: 9096

auth_enabled: false

common:
  path_prefix: /loki
  storage:
    filesystem:
      chunks_directory: /loki/chunks
      rules_directory: /loki/rules
  ring:
    instance_addr: 127.0.0.1
    kvstore:
      store: inmemory

schema_config:
  configs:
    - from: 2024-01-01
      store: boltdb-shipper
      object_store: filesystem
      schema: v13
      index:
        prefix: index_
        period: 24h

ruler:
  alertmanager_url: http://alertmanager:9093
EOF

  # Promtail (—Å—ä–±–∏—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω–∏ –ª–æ–≥–æ–≤–µ –∏ –≥–∏ –ø—Ä–∞—â–∞ –∫—ä–º Loki)
  sudo tee "$LOKI_DIR/promtail-config.yml" >/dev/null <<'EOF'
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*.log
  - job_name: journal
    journal:
      path: /var/log/journal
      max_age: 12h
      labels:
        job: systemd-journal
    relabel_configs:
      - source_labels: ['__journal__systemd_unit']
        target_label: 'unit'
EOF

  # Grafana datasource provisioning (Prometheus + Loki)
  sudo tee "$GRAFANA_DIR/provisioning/datasources/datasource.yml" >/dev/null <<'EOF'
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
  - name: Loki
    type: loki
    access: proxy
    url: http://loki:3100
EOF

  # --- 3) docker-compose.yml ---
  sudo tee "$COMPOSE_DIR/docker-compose.yml" >/dev/null <<'EOF'
services:
  prometheus:
    image: prom/prometheus:latest
    container_name: monhub_prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=15d
    volumes:
      - ${PROM_DIR}/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ${PROM_DIR}/data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks: [monhub]

  alertmanager:
    image: prom/alertmanager:latest
    container_name: monhub_alertmanager
    volumes:
      - ${ALERT_DIR}/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - ${ALERT_DIR}/data:/alertmanager
    ports:
      - "9093:9093"
    restart: unless-stopped
    networks: [monhub]

  blackbox:
    image: prom/blackbox-exporter:latest
    container_name: monhub_blackbox
    volumes:
      - ${PWD}/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    ports:
      - "9115:9115"
    restart: unless-stopped
    networks: [monhub]

  loki:
    image: grafana/loki:2.9.8
    container_name: monhub_loki
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ${LOKI_DIR}/config.yml:/etc/loki/config.yml:ro
      - ${LOKI_DIR}/data:/loki
    ports:
      - "3100:3100"
    restart: unless-stopped
    networks: [monhub]

  promtail:
    image: grafana/promtail:2.9.8
    container_name: monhub_promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log:ro
      - /var/log/journal:/var/log/journal:ro
      - ${LOKI_DIR}/promtail-config.yml:/etc/promtail/config.yml:ro
    restart: unless-stopped
    networks: [monhub]

  grafana:
    image: grafana/grafana:10.4.6
    container_name: monhub_grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ${GRAFANA_DIR}/data:/var/lib/grafana
      - ${GRAFANA_DIR}/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped
    networks: [monhub]

networks:
  monhub:
    driver: bridge
EOF

  # --- 4) –°—Ç–∞—Ä—Ç –Ω–∞ —Å—Ç–µ–∫–∞ ---
  (cd "$COMPOSE_DIR" && sudo docker compose pull && sudo docker compose up -d)

  # --- 5) systemd unit –∑–∞ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç ---
  sudo tee /etc/systemd/system/monhub.service >/dev/null <<EOF
[Unit]
Description=NetGalaxy MonHub Stack (Prometheus/Alertmanager/Loki/Grafana)
Wants=docker.service
After=docker.service

[Service]
Type=oneshot
WorkingDirectory=$COMPOSE_DIR
RemainAfterExit=true
ExecStart=/usr/bin/docker compose up -d
ExecStop=/usr/bin/docker compose down

[Install]
WantedBy=multi-user.target
EOF

  sudo systemctl daemon-reload
  sudo systemctl enable --now monhub.service

  # --- 6) –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç ---
  if sudo grep -q '^MON_RESULT_MODULE5=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE5=.*|MON_RESULT_MODULE5=‚úÖ|' "$SETUP_ENV_FILE"; then
      echo "MON_RESULT_MODULE5=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE5=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi

fi
echo ""
echo ""


# =====================================================================
# [–ú–û–î–£–õ 6] Node Exporter (—Ö–æ—Å—Ç –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ Prometheus)
# =====================================================================
log "[6] NODE EXPORTER: –∏–Ω—Å—Ç–∞–ª–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus..."
log "=========================================================="
log ""

if sudo grep -q '^MON_RESULT_MODULE6=‚úÖ' "$SETUP_ENV_FILE" 2>/dev/null; then
  echo "‚ÑπÔ∏è –ú–æ–¥—É–ª 6 –≤–µ—á–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ..."
  echo ""
else
  # --- 1) –ò–Ω—Å—Ç–∞–ª–∞—Ü–∏—è –Ω–∞ Node Exporter (systemd –ø–∞–∫–µ—Ç) ---
  sudo apt-get update -y
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y prometheus-node-exporter

  # –£–≤–µ—Ä—è–≤–∞–º–µ —Å–µ, —á–µ —É—Å–ª—É–≥–∞—Ç–∞ –µ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∞ –∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–∞
  sudo systemctl enable --now prometheus-node-exporter
  sudo systemctl is-active --quiet prometheus-node-exporter && ok "node_exporter –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω –Ω–∞ –ø–æ—Ä—Ç 9100." || warn "node_exporter –Ω–µ –∏–∑–≥–ª–µ–∂–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω."

  # --- 2) –û—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ SERVER_IP –∑–∞ –¥–æ—Å—Ç—ä–ø –æ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ Prometheus ---
  SERVER_IP_VALUE=""
  if [[ -f "$MODULES_FILE" ]]; then
    SERVER_IP_VALUE="$(awk -F= '/^SERVER_IP=/{gsub(/"/,"",$2); print $2}' "$MODULES_FILE" | tail -n1)"
  fi
  if [[ -z "$SERVER_IP_VALUE" ]]; then
    # fallback ‚Äì –∑–∞—Å–∏—á–∞–Ω–µ –Ω–∞ –ø—É–±–ª–∏—á–Ω–∏—è IPv4 (–±–µ–∑ –≤—ä–ø—Ä–æ—Å–∏ –∫—ä–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞)
    SERVER_IP_VALUE="$(curl -s -4 ifconfig.me || true)"
  fi
  if [[ -z "$SERVER_IP_VALUE" ]]; then
    err "–ù–µ—É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ SERVER_IP. –ú–æ–ª—è, –∑–∞–¥–∞–π—Ç–µ SERVER_IP –≤ $MODULES_FILE –∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –æ—Ç–Ω–æ–≤–æ."
    exit 1
  fi
  ok "–ò–∑–ø–æ–ª–∑–≤–∞–Ω SERVER_IP –∑–∞ Prometheus target: $SERVER_IP_VALUE:9100"

  # --- 3) –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Prometheus –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞ (target –∫—ä–º —Ö–æ—Å—Ç–∞) ---
  if [[ -f "$PROM_DIR/prometheus.yml" ]]; then
    # –ó–∞–º–µ–Ω—è–º–µ 'localhost:9100' –∏–ª–∏ "localhost:9100" —Å "<SERVER_IP>:9100"
    sudo sed -i -E "s@(['\"])localhost:9100\1@\"${SERVER_IP_VALUE}:9100\"@g" "$PROM_DIR/prometheus.yml"
  else
    err "–õ–∏–ø—Å–≤–∞ —Ñ–∞–π–ª $PROM_DIR/prometheus.yml ‚Äì –ú–æ–¥—É–ª 5 –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ –µ –∏–∑–ø—ä–ª–Ω–µ–Ω."
    exit 1
  fi

  # --- 4) –†–µ—Å—Ç–∞—Ä—Ç —Å–∞–º–æ –Ω–∞ Prometheus –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∑–∞ –¥–∞ –ø—Ä–æ—á–µ—Ç–µ –Ω–æ–≤–∞—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
  if [[ -d "$COMPOSE_DIR" ]]; then
    (cd "$COMPOSE_DIR" && sudo docker compose up -d prometheus)
    ok "Prometheus –µ –ø—Ä–µ–∑–∞—Ä–µ–¥–µ–Ω —Å –Ω–æ–≤–∏—è target."
  else
    err "–õ–∏–ø—Å–≤–∞ COMPOSE_DIR ($COMPOSE_DIR) ‚Äì –ø—Ä–æ–≤–µ—Ä–µ—Ç–µ –ú–æ–¥—É–ª 5."
    exit 1
  fi

  # --- 5) –ú–∞—Ä–∫–∏—Ä–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç ---
  if sudo grep -q '^MON_RESULT_MODULE6=' "$SETUP_ENV_FILE" 2>/dev/null; then
    if sudo sed -i 's|^MON_RESULT_MODULE6=.*|MON_RESULT_MODULE6=‚úÖ|' "$SETUP_ENV_FILE"; then
      echo "MON_RESULT_MODULE6=‚úÖ"
    fi
  else
    echo "MON_RESULT_MODULE6=‚úÖ" | sudo tee -a "$SETUP_ENV_FILE"
  fi
fi

echo ""
echo ""













exit 0
# =====================================================================
# [–ú–û–î–£–õ 6] –û–±–æ–±—â–µ–Ω–∏–µ
# =====================================================================
log ""
log "=============================================="
log "[6] –û–ë–û–ë–©–ï–ù–ò–ï"
log "=============================================="
log ""

GRAFANA_URL="http://$(hostname -I | awk '{print $1}'):3000"
PROM_URL="http://$(hostname -I | awk '{print $1}'):9090"

printf "\n"
printf "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–µ–∫: \n"
printf "  ‚Ä¢ Grafana:        %s (admin / admin)\n" "$GRAFANA_URL"
printf "  ‚Ä¢ Prometheus:     %s\n" "$PROM_URL"
printf "  ‚Ä¢ Alertmanager:   http://<IP>:9093\n"
printf "  ‚Ä¢ Loki API:       http://<IP>:3100\n"
printf "  ‚Ä¢ node_exporter:  http://<IP>:9100/metrics\n"
printf "  ‚Ä¢ blackbox:       http://<IP>:9115/probe?target=https://example.org\n"
printf "\n–õ–æ–≥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s\n" "$LOG_DIR"
printf "Compose –ø–∞–ø–∫–∞:  %s\n" "$COMPOSE_DIR"
printf "\nUFW: –æ—Ç–≤–æ—Ä–µ–Ω–∏ –ø–æ—Ä—Ç–æ–≤–µ 22, 3000, 9090, 9093, 3100, 9100, 9115\n"

mark_success "MONHUB_MODULE6"
ok "–ì–æ—Ç–æ–≤–æ."
